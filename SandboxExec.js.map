{"version":3,"file":"SandboxExec.js","sources":["../src/SandboxExec.ts"],"sourcesContent":["import { IEvalContext } from './eval.js';\nimport { Change, ExecReturn, executeTree, executeTreeAsync } from './executor.js';\nimport {\n  createContext,\n  IContext,\n  IExecContext,\n  IGlobals,\n  IOptionParams,\n  IOptions,\n  IScope,\n  replacementCallback,\n  SandboxGlobal,\n  SubscriptionSubject,\n} from './utils.js';\n\nfunction subscribeSet(\n  obj: unknown,\n  name: string,\n  callback: (modification: Change) => void,\n  context: {\n    setSubscriptions: WeakMap<\n      SubscriptionSubject,\n      Map<string, Set<(modification: Change) => void>>\n    >;\n    changeSubscriptions: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>;\n  }\n): { unsubscribe: () => void } {\n  if (!(obj instanceof Object))\n    throw new Error(\n      'Invalid subscription object, got ' + (typeof obj === 'object' ? 'null' : typeof obj)\n    );\n  const names =\n    context.setSubscriptions.get(obj) || new Map<string, Set<(modification: Change) => void>>();\n  context.setSubscriptions.set(obj, names);\n  const callbacks = names.get(name) || new Set();\n  names.set(name, callbacks);\n  callbacks.add(callback);\n  let changeCbs: Set<(modification: Change) => void>;\n  const val = (obj as any)[name] as unknown;\n  if (val instanceof Object) {\n    changeCbs = context.changeSubscriptions.get(val) || new Set();\n    changeCbs.add(callback);\n    context.changeSubscriptions.set(val, changeCbs);\n  }\n  return {\n    unsubscribe: () => {\n      callbacks.delete(callback);\n      changeCbs?.delete(callback);\n    },\n  };\n}\n\nexport default class SandboxExec {\n  context: IContext;\n  setSubscriptions: WeakMap<SubscriptionSubject, Map<string, Set<(modification: Change) => void>>> =\n    new WeakMap();\n  changeSubscriptions: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>> =\n    new WeakMap();\n  sandboxFunctions: WeakMap<(...args: any[]) => any, IExecContext> = new WeakMap();\n  constructor(options?: IOptionParams, public evalContext?: IEvalContext) {\n    const opt: IOptions = Object.assign(\n      {\n        audit: false,\n        forbidFunctionCalls: false,\n        forbidFunctionCreation: false,\n        globals: SandboxExec.SAFE_GLOBALS,\n        prototypeWhitelist: SandboxExec.SAFE_PROTOTYPES,\n        prototypeReplacements: new Map<new () => any, replacementCallback>(),\n      },\n      options || {}\n    );\n    this.context = createContext(this, opt);\n  }\n\n  static get SAFE_GLOBALS(): IGlobals {\n    return {\n      Function,\n      console: {\n        debug: console.debug,\n        error: console.error,\n        info: console.info,\n        log: console.log,\n        table: console.table,\n        warn: console.warn,\n      },\n      isFinite,\n      isNaN,\n      parseFloat,\n      parseInt,\n      decodeURI,\n      decodeURIComponent,\n      encodeURI,\n      encodeURIComponent,\n      escape,\n      unescape,\n      Boolean,\n      Number,\n      BigInt,\n      String,\n      Object,\n      Array,\n      Symbol,\n      Error,\n      EvalError,\n      RangeError,\n      ReferenceError,\n      SyntaxError,\n      TypeError,\n      URIError,\n      Int8Array,\n      Uint8Array,\n      Uint8ClampedArray,\n      Int16Array,\n      Uint16Array,\n      Int32Array,\n      Uint32Array,\n      Float32Array,\n      Float64Array,\n      Map,\n      Set,\n      WeakMap,\n      WeakSet,\n      Promise,\n      Intl,\n      JSON,\n      Math,\n      Date,\n      RegExp,\n    };\n  }\n\n  static get SAFE_PROTOTYPES(): Map<any, Set<string>> {\n    const protos = [\n      SandboxGlobal,\n      Function,\n      Boolean,\n      Number,\n      BigInt,\n      String,\n      Date,\n      Error,\n      Array,\n      Int8Array,\n      Uint8Array,\n      Uint8ClampedArray,\n      Int16Array,\n      Uint16Array,\n      Int32Array,\n      Uint32Array,\n      Float32Array,\n      Float64Array,\n      Map,\n      Set,\n      WeakMap,\n      WeakSet,\n      Promise,\n      Symbol,\n      Date,\n      RegExp,\n    ];\n    const map = new Map<any, Set<string>>();\n    protos.forEach((proto) => {\n      map.set(proto, new Set());\n    });\n    map.set(\n      Object,\n      new Set([\n        'entries',\n        'fromEntries',\n        'getOwnPropertyNames',\n        'is',\n        'keys',\n        'hasOwnProperty',\n        'isPrototypeOf',\n        'propertyIsEnumerable',\n        'toLocaleString',\n        'toString',\n        'valueOf',\n        'values',\n      ])\n    );\n    return map;\n  }\n\n  subscribeGet(\n    callback: (obj: SubscriptionSubject, name: string) => void,\n    context: IExecContext\n  ): { unsubscribe: () => void } {\n    context.getSubscriptions.add(callback);\n    return { unsubscribe: () => context.getSubscriptions.delete(callback) };\n  }\n\n  subscribeSet(\n    obj: object,\n    name: string,\n    callback: (modification: Change) => void,\n    context: SandboxExec | IExecContext\n  ): { unsubscribe: () => void } {\n    return subscribeSet(obj, name, callback, context);\n  }\n\n  subscribeSetGlobal(\n    obj: SubscriptionSubject,\n    name: string,\n    callback: (modification: Change) => void\n  ): { unsubscribe: () => void } {\n    return subscribeSet(obj, name, callback, this);\n  }\n\n  getContext(fn: (...args: any[]) => any) {\n    return this.sandboxFunctions.get(fn);\n  }\n\n  executeTree<T>(context: IExecContext, scopes: IScope[] = []): ExecReturn<T> {\n    return executeTree(\n      {\n        ticks: BigInt(0),\n      },\n      context,\n      context.tree,\n      scopes\n    );\n  }\n\n  executeTreeAsync<T>(context: IExecContext, scopes: IScope[] = []): Promise<ExecReturn<T>> {\n    return executeTreeAsync(\n      {\n        ticks: BigInt(0),\n      },\n      context,\n      context.tree,\n      scopes\n    );\n  }\n}\n"],"names":[],"mappings":"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"}