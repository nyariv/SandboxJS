{"version":3,"file":"Sandbox.min.js","sources":["../src/utils.ts","../src/executor.ts","../src/unraw.ts","../src/parser.ts","../src/eval.ts","../src/SandboxExec.ts","../src/Sandbox.ts"],"sourcesContent":["import { IEvalContext } from './eval';\nimport { Change, Unknown } from './executor';\nimport { IConstants, IExecutionTree, Lisp, LispItem } from './parser';\nimport SandboxExec from './SandboxExec';\n\nexport type replacementCallback = (obj: any, isStaticAccess: boolean) => any;\n\nexport interface IOptionParams {\n  audit?: boolean;\n  forbidFunctionCalls?: boolean;\n  forbidFunctionCreation?: boolean;\n  prototypeReplacements?: Map<new () => any, replacementCallback>;\n  prototypeWhitelist?: Map<any, Set<string>>;\n  globals: IGlobals;\n  executionQuota?: bigint;\n  onExecutionQuotaReached?: (\n    ticks: Ticks,\n    scope: Scope,\n    context: IExecutionTree,\n    tree: LispItem\n  ) => boolean | void;\n}\n\nexport interface IOptions {\n  audit: boolean;\n  forbidFunctionCalls: boolean;\n  forbidFunctionCreation: boolean;\n  prototypeReplacements: Map<new () => any, replacementCallback>;\n  prototypeWhitelist: Map<any, Set<string>>;\n  globals: IGlobals;\n  executionQuota?: bigint;\n  onExecutionQuotaReached?: (\n    ticks: Ticks,\n    scope: Scope,\n    context: IExecutionTree,\n    tree: LispItem\n  ) => boolean | void;\n}\n\nexport interface IContext {\n  sandbox: SandboxExec;\n  globalScope: Scope;\n  sandboxGlobal: ISandboxGlobal;\n  globalsWhitelist: Set<any>;\n  prototypeWhitelist: Map<any, Set<string>>;\n  options: IOptions;\n  auditReport?: IAuditReport;\n}\n\nexport interface IAuditReport {\n  globalsAccess: Set<unknown>;\n  prototypeAccess: { [name: string]: Set<string> };\n}\n\nexport interface Ticks {\n  ticks: bigint;\n}\n\nexport type SubscriptionSubject = object;\n\nexport interface IExecContext extends IExecutionTree {\n  ctx: IContext;\n  getSubscriptions: Set<(obj: SubscriptionSubject, name: string) => void>;\n  setSubscriptions: WeakMap<SubscriptionSubject, Map<string, Set<(modification: Change) => void>>>;\n  changeSubscriptions: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>;\n  setSubscriptionsGlobal: WeakMap<\n    SubscriptionSubject,\n    Map<string, Set<(modification: Change) => void>>\n  >;\n  changeSubscriptionsGlobal: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>;\n  registerSandboxFunction: (fn: (...args: any[]) => any) => void;\n  evals: Map<any, any>;\n  allowJit: boolean;\n  evalContext?: IEvalContext;\n}\n\nexport interface ISandboxGlobal {\n  [key: string]: unknown;\n}\ninterface SandboxGlobalConstructor {\n  new (globals: IGlobals): ISandboxGlobal;\n}\n\nexport const SandboxGlobal = function SandboxGlobal(this: ISandboxGlobal, globals: IGlobals) {\n  if (globals === (globalThis as any)) return globalThis;\n  for (const i in globals) {\n    this[i] = globals[i];\n  }\n} as any as SandboxGlobalConstructor;\n\nexport type IGlobals = ISandboxGlobal;\n\nexport class ExecContext implements IExecContext {\n  constructor(\n    public ctx: IContext,\n    public constants: IConstants,\n    public tree: Lisp[],\n    public getSubscriptions: Set<(obj: SubscriptionSubject, name: string) => void>,\n    public setSubscriptions: WeakMap<\n      SubscriptionSubject,\n      Map<string, Set<(modification: Change) => void>>\n    >,\n    public changeSubscriptions: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>,\n    public setSubscriptionsGlobal: WeakMap<\n      SubscriptionSubject,\n      Map<string, Set<(modification: Change) => void>>\n    >,\n    public changeSubscriptionsGlobal: WeakMap<\n      SubscriptionSubject,\n      Set<(modification: Change) => void>\n    >,\n    public evals: Map<any, any>,\n    public registerSandboxFunction: (fn: (...args: any[]) => any) => void,\n    public allowJit: boolean,\n    public evalContext?: IEvalContext\n  ) {}\n}\n\nexport function createContext(sandbox: SandboxExec, options: IOptions): IContext {\n  const sandboxGlobal = new SandboxGlobal(options.globals);\n  const context = {\n    sandbox: sandbox,\n    globalsWhitelist: new Set(Object.values(options.globals)),\n    prototypeWhitelist: new Map([...options.prototypeWhitelist].map((a) => [a[0].prototype, a[1]])),\n    options,\n    globalScope: new Scope(null, options.globals, sandboxGlobal),\n    sandboxGlobal,\n  };\n  context.prototypeWhitelist.set(Object.getPrototypeOf([][Symbol.iterator]()) as Object, new Set());\n  return context;\n}\n\nexport function createExecContext(\n  sandbox: {\n    setSubscriptions: WeakMap<\n      SubscriptionSubject,\n      Map<string, Set<(modification: Change) => void>>\n    >;\n    changeSubscriptions: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>;\n    sandboxFunctions: WeakMap<(...args: any[]) => any, IExecContext>;\n    context: IContext;\n  },\n  executionTree: IExecutionTree,\n  evalContext?: IEvalContext\n): IExecContext {\n  const evals = new Map();\n  const execContext: IExecContext = new ExecContext(\n    sandbox.context,\n    executionTree.constants,\n    executionTree.tree,\n    new Set<(obj: SubscriptionSubject, name: string) => void>(),\n    new WeakMap<SubscriptionSubject, Map<string, Set<(modification: Change) => void>>>(),\n    new WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>(),\n    sandbox.setSubscriptions,\n    sandbox.changeSubscriptions,\n    evals,\n    (fn) => sandbox.sandboxFunctions.set(fn, execContext),\n    !!evalContext,\n    evalContext\n  );\n  if (evalContext) {\n    const func = evalContext.sandboxFunction(execContext);\n    evals.set(Function, func);\n    evals.set(eval, evalContext.sandboxedEval(func));\n    evals.set(setTimeout, evalContext.sandboxedSetTimeout(func));\n    evals.set(setInterval, evalContext.sandboxedSetInterval(func));\n  }\n  return execContext;\n}\n\nexport class CodeString {\n  start: number;\n  end: number;\n  ref: { str: string };\n  constructor(str: string | CodeString) {\n    this.ref = { str: '' };\n    if (str instanceof CodeString) {\n      this.ref = str.ref;\n      this.start = str.start;\n      this.end = str.end;\n    } else {\n      this.ref.str = str;\n      this.start = 0;\n      this.end = str.length;\n    }\n  }\n\n  substring(start: number, end?: number): CodeString {\n    if (!this.length) return this;\n    start = this.start + start;\n    if (start < 0) {\n      start = 0;\n    }\n    if (start > this.end) {\n      start = this.end;\n    }\n    end = end === undefined ? this.end : this.start + end;\n    if (end < 0) {\n      end = 0;\n    }\n    if (end > this.end) {\n      end = this.end;\n    }\n    const code = new CodeString(this);\n    code.start = start;\n    code.end = end;\n    return code;\n  }\n\n  get length() {\n    const len = this.end - this.start;\n    return len < 0 ? 0 : len;\n  }\n\n  char(i: number) {\n    if (this.start === this.end) return undefined;\n    return this.ref.str[this.start + i];\n  }\n\n  toString() {\n    return this.ref.str.substring(this.start, this.end);\n  }\n\n  trimStart() {\n    const found = /^\\s+/.exec(this.toString());\n    const code = new CodeString(this);\n    if (found) {\n      code.start += found[0].length;\n    }\n    return code;\n  }\n\n  slice(start: number, end?: number) {\n    if (start < 0) {\n      start = this.end - this.start + start;\n    }\n    if (start < 0) {\n      start = 0;\n    }\n    if (end === undefined) {\n      end = this.end - this.start;\n    }\n\n    if (end < 0) {\n      end = this.end - this.start + end;\n    }\n    if (end < 0) {\n      end = 0;\n    }\n    return this.substring(start, end);\n  }\n\n  trim() {\n    const code = this.trimStart();\n    const found = /\\s+$/.exec(code.toString());\n    if (found) {\n      code.end -= found[0].length;\n    }\n    return code;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n}\n\nfunction keysOnly(obj: unknown): Record<string, true> {\n  const ret: Record<string, true> = Object.assign({}, obj);\n  for (const key in ret) {\n    ret[key] = true;\n  }\n  return ret;\n}\n\nconst reservedWords = new Set([\n  'instanceof',\n  'typeof',\n  'return',\n  'throw',\n  'try',\n  'catch',\n  'if',\n  'finally',\n  'else',\n  'in',\n  'of',\n  'var',\n  'let',\n  'const',\n  'for',\n  'delete',\n  'false',\n  'true',\n  'while',\n  'do',\n  'break',\n  'continue',\n  'new',\n  'function',\n  'async',\n  'await',\n  'switch',\n  'case',\n]);\n\nexport const enum VarType {\n  let = 'let',\n  const = 'const',\n  var = 'var',\n}\n\nexport class Scope {\n  parent: Scope | null;\n  const: { [key: string]: true } = {};\n  let: { [key: string]: true } = {};\n  var: { [key: string]: true } = {};\n  globals: { [key: string]: true };\n  allVars: { [key: string]: unknown } & Object;\n  functionThis?: Unknown;\n  constructor(parent: Scope | null, vars = {}, functionThis?: Unknown) {\n    const isFuncScope = functionThis !== undefined || parent === null;\n    this.parent = parent;\n    this.allVars = vars;\n    this.let = isFuncScope ? this.let : keysOnly(vars);\n    this.var = isFuncScope ? keysOnly(vars) : this.var;\n    this.globals = parent === null ? keysOnly(vars) : {};\n    this.functionThis = functionThis;\n  }\n\n  get(key: string, functionScope = false): Prop {\n    const functionThis = this.functionThis;\n    if (key === 'this' && functionThis !== undefined) {\n      return new Prop({ this: functionThis }, key, true, false, true);\n    }\n    if (reservedWords.has(key)) throw new SyntaxError(\"Unexepected token '\" + key + \"'\");\n    if (this.parent === null || !functionScope || functionThis !== undefined) {\n      if (this.globals.hasOwnProperty(key)) {\n        return new Prop(functionThis, key, false, true, true);\n      }\n      if (key in this.allVars && (!(key in {}) || this.allVars.hasOwnProperty(key))) {\n        return new Prop(\n          this.allVars,\n          key,\n          this.const.hasOwnProperty(key),\n          this.globals.hasOwnProperty(key),\n          true\n        );\n      }\n      if (this.parent === null) {\n        return new Prop(undefined, key);\n      }\n    }\n    return this.parent.get(key, functionScope);\n  }\n\n  set(key: string, val: unknown) {\n    if (key === 'this') throw new SyntaxError('\"this\" cannot be assigned');\n    if (reservedWords.has(key)) throw new SyntaxError(\"Unexepected token '\" + key + \"'\");\n    const prop = this.get(key);\n    if (prop.context === undefined) {\n      throw new ReferenceError(`Variable '${key}' was not declared.`);\n    }\n    if (prop.isConst) {\n      throw new TypeError(`Cannot assign to const variable '${key}'`);\n    }\n    if (prop.isGlobal) {\n      throw new SandboxError(`Cannot override global variable '${key}'`);\n    }\n    if (!(prop.context instanceof Object)) throw new SandboxError('Scope is not an object');\n    prop.context[prop.prop] = val;\n    return prop;\n  }\n\n  declare(key: string, type: VarType, value: unknown = undefined, isGlobal = false): Prop {\n    if (key === 'this') throw new SyntaxError('\"this\" cannot be declared');\n    if (reservedWords.has(key)) throw new SyntaxError(\"Unexepected token '\" + key + \"'\");\n    if (type === 'var' && this.functionThis === undefined && this.parent !== null) {\n      return this.parent.declare(key, type, value, isGlobal);\n    } else if (\n      (this[type].hasOwnProperty(key) && type !== 'const' && !this.globals.hasOwnProperty(key)) ||\n      !(key in this.allVars)\n    ) {\n      if (isGlobal) {\n        this.globals[key] = true;\n      }\n      this[type][key] = true;\n      this.allVars[key] = value;\n    } else {\n      throw new SandboxError(`Identifier '${key}' has already been declared`);\n    }\n    return new Prop(this.allVars, key, this.const.hasOwnProperty(key), isGlobal);\n  }\n}\n\nexport interface IScope {\n  [key: string]: any;\n}\n\nexport class FunctionScope implements IScope {}\n\nexport class LocalScope implements IScope {}\n\nexport class SandboxError extends Error {}\n\nexport function isLisp<Type extends Lisp = Lisp>(item: LispItem | LispItem): item is Type {\n  return (\n    Array.isArray(item) &&\n    typeof item[0] === 'number' &&\n    item[0] !== LispType.None &&\n    item[0] !== LispType.True\n  );\n}\n\nexport const enum LispType {\n  None,\n  Prop,\n  StringIndex,\n  Let,\n  Const,\n  Call,\n  KeyVal,\n  Number,\n  Return,\n  Assign,\n  InlineFunction,\n  ArrowFunction,\n  CreateArray,\n  If,\n  IfCase,\n  InlineIf,\n  InlineIfCase,\n  SpreadObject,\n  SpreadArray,\n  ArrayProp,\n  PropOptional,\n  CallOptional,\n  CreateObject,\n  Group,\n  Not,\n  IncrementBefore,\n  IncrementAfter,\n  DecrementBefore,\n  DecrementAfter,\n  And,\n  Or,\n  StrictNotEqual,\n  StrictEqual,\n  Plus,\n  Var,\n  GlobalSymbol,\n  Literal,\n  Function,\n  Loop,\n  Try,\n  Switch,\n  SwitchCase,\n  Block,\n  Expression,\n  Await,\n  New,\n  Throw,\n  Minus,\n  Divide,\n  Power,\n  Multiply,\n  Modulus,\n  Equal,\n  NotEqual,\n  SmallerEqualThan,\n  LargerEqualThan,\n  SmallerThan,\n  LargerThan,\n  Negative,\n  Positive,\n  Typeof,\n  Delete,\n  Instanceof,\n  In,\n  Inverse,\n  SubractEquals,\n  AddEquals,\n  DivideEquals,\n  PowerEquals,\n  MultiplyEquals,\n  ModulusEquals,\n  BitNegateEquals,\n  BitAndEquals,\n  BitOrEquals,\n  UnsignedShiftRightEquals,\n  ShiftRightEquals,\n  ShiftLeftEquals,\n  BitAnd,\n  BitOr,\n  BitNegate,\n  BitShiftLeft,\n  BitShiftRight,\n  BitUnsignedShiftRight,\n  BigInt,\n  LiteralIndex,\n  RegexIndex,\n  LoopAction,\n  Void,\n  True,\n\n  LispEnumSize,\n}\n\nexport class Prop {\n  constructor(\n    public context: Unknown,\n    public prop: string,\n    public isConst = false,\n    public isGlobal = false,\n    public isVariable = false\n  ) {}\n\n  get<T = unknown>(context: IExecContext): T {\n    const ctx = this.context;\n    if (ctx === undefined) throw new ReferenceError(`${this.prop} is not defined`);\n    if (ctx === null)\n      throw new TypeError(`Cannot read properties of null, (reading '${this.prop}')`);\n    context.getSubscriptions.forEach((cb) => cb(ctx, this.prop));\n    return (ctx as any)[this.prop] as T;\n  }\n}\n","import { LispItem, Lisp, IRegEx, LispFamily, ExtractLispOp, SwitchCase } from './parser.js';\nimport {\n  CodeString,\n  IAuditReport,\n  IExecContext,\n  IScope,\n  isLisp,\n  LispType,\n  LocalScope,\n  Prop,\n  SandboxError,\n  Scope,\n  Ticks,\n  VarType,\n} from './utils.js';\n\nexport type Done<T = any> = (err?: any, res?: T | typeof optional) => void;\n\nexport class ExecReturn<T> {\n  constructor(\n    public auditReport: IAuditReport | undefined,\n    public result: T,\n    public returned: boolean,\n    public breakLoop = false,\n    public continueLoop = false\n  ) {}\n}\n\nexport type Unknown = undefined | null | Record<string | number, unknown>;\n\nexport interface IChange {\n  type: string;\n}\n\nexport interface ICreate extends IChange {\n  type: 'create';\n  prop: number | string;\n}\n\nexport interface IReplace extends IChange {\n  type: 'replace';\n}\n\nexport interface IDelete extends IChange {\n  type: 'delete';\n  prop: number | string;\n}\n\nexport interface IReverse extends IChange {\n  type: 'reverse';\n}\n\nexport interface ISort extends IChange {\n  type: 'sort';\n}\n\nexport interface IPush extends IChange {\n  type: 'push';\n  added: unknown[];\n}\n\nexport interface IPop extends IChange {\n  type: 'pop';\n  removed: unknown[];\n}\n\nexport interface IShift extends IChange {\n  type: 'shift';\n  removed: unknown[];\n}\n\nexport interface IUnShift extends IChange {\n  type: 'unshift';\n  added: unknown[];\n}\n\nexport interface ISplice extends IChange {\n  type: 'splice';\n  startIndex: number;\n  deleteCount: number;\n  added: unknown[];\n  removed: unknown[];\n}\n\nexport interface ICopyWithin extends IChange {\n  type: 'copyWithin';\n  startIndex: number;\n  endIndex: number;\n  added: unknown[];\n  removed: unknown[];\n}\n\nexport type Change =\n  | ICreate\n  | IReplace\n  | IDelete\n  | IReverse\n  | ISort\n  | IPush\n  | IPop\n  | IUnShift\n  | IShift\n  | ISplice\n  | ICopyWithin;\n\nconst optional = {};\n\nfunction generateArgs(argNames: string[], args: unknown[]) {\n  const vars: Record<string, unknown> = {};\n  argNames.forEach((arg, i) => {\n    if (arg.startsWith('...')) {\n      vars[arg.substring(3)] = args.slice(i);\n    } else {\n      vars[arg] = args[i];\n    }\n  });\n  return vars;\n}\n\nexport const sandboxedFunctions = new WeakSet();\nexport function createFunction(\n  argNames: string[],\n  parsed: Lisp[],\n  ticks: Ticks,\n  context: IExecContext,\n  scope?: Scope,\n  name?: string\n) {\n  if (context.ctx.options.forbidFunctionCreation) {\n    throw new SandboxError('Function creation is forbidden');\n  }\n  let func;\n  if (name === undefined) {\n    func = (...args: unknown[]) => {\n      const vars = generateArgs(argNames, args);\n      const res = executeTree(\n        ticks,\n        context,\n        parsed,\n        scope === undefined ? [] : [new Scope(scope, vars)]\n      );\n      return res.result;\n    };\n  } else {\n    func = function sandboxedObject(this: Unknown, ...args: unknown[]) {\n      const vars = generateArgs(argNames, args);\n      const res = executeTree(\n        ticks,\n        context,\n        parsed,\n        scope === undefined ? [] : [new Scope(scope, vars, this)]\n      );\n      return res.result;\n    };\n  }\n  context.registerSandboxFunction(func);\n  sandboxedFunctions.add(func);\n  return func;\n}\n\nexport function createFunctionAsync(\n  argNames: string[],\n  parsed: Lisp[],\n  ticks: Ticks,\n  context: IExecContext,\n  scope?: Scope,\n  name?: string\n) {\n  if (context.ctx.options.forbidFunctionCreation) {\n    throw new SandboxError('Function creation is forbidden');\n  }\n  if (!context.ctx.prototypeWhitelist?.has(Promise.prototype)) {\n    throw new SandboxError('Async/await not permitted');\n  }\n  let func;\n  if (name === undefined) {\n    func = async (...args: unknown[]) => {\n      const vars = generateArgs(argNames, args);\n      const res = await executeTreeAsync(\n        ticks,\n        context,\n        parsed,\n        scope === undefined ? [] : [new Scope(scope, vars)]\n      );\n      return res.result;\n    };\n  } else {\n    func = async function sandboxedObject(this: Unknown, ...args: unknown[]) {\n      const vars = generateArgs(argNames, args);\n      const res = await executeTreeAsync(\n        ticks,\n        context,\n        parsed,\n        scope === undefined ? [] : [new Scope(scope, vars, this)]\n      );\n      return res.result;\n    };\n  }\n  context.registerSandboxFunction(func);\n  sandboxedFunctions.add(func);\n  return func;\n}\n\nexport function assignCheck(obj: Prop, context: IExecContext, op = 'assign') {\n  if (obj.context === undefined) {\n    throw new ReferenceError(`Cannot ${op} value to undefined.`);\n  }\n  if (typeof obj.context !== 'object' && typeof obj.context !== 'function') {\n    throw new SyntaxError(`Cannot ${op} value to a primitive.`);\n  }\n  if (obj.isConst) {\n    throw new TypeError(`Cannot set value to const variable '${obj.prop}'`);\n  }\n  if (obj.isGlobal) {\n    throw new SandboxError(`Cannot ${op} property '${obj.prop}' of a global object`);\n  }\n  if (obj.context === null) {\n    throw new TypeError('Cannot set properties of null');\n  }\n  if (typeof obj.context[obj.prop] === 'function' && !obj.context.hasOwnProperty(obj.prop)) {\n    throw new SandboxError(`Override prototype property '${obj.prop}' not allowed`);\n  }\n  if (op === 'delete') {\n    if (obj.context.hasOwnProperty(obj.prop)) {\n      context.changeSubscriptions\n        .get(obj.context)\n        ?.forEach((cb) => cb({ type: 'delete', prop: obj.prop }));\n      context.changeSubscriptionsGlobal\n        .get(obj.context)\n        ?.forEach((cb) => cb({ type: 'delete', prop: obj.prop }));\n    }\n  } else if (obj.context.hasOwnProperty(obj.prop)) {\n    context.setSubscriptions\n      .get(obj.context)\n      ?.get(obj.prop)\n      ?.forEach((cb) =>\n        cb({\n          type: 'replace',\n        })\n      );\n    context.setSubscriptionsGlobal\n      .get(obj.context)\n      ?.get(obj.prop)\n      ?.forEach((cb) =>\n        cb({\n          type: 'replace',\n        })\n      );\n  } else {\n    context.changeSubscriptions\n      .get(obj.context)\n      ?.forEach((cb) => cb({ type: 'create', prop: obj.prop }));\n    context.changeSubscriptionsGlobal\n      .get(obj.context)\n      ?.forEach((cb) => cb({ type: 'create', prop: obj.prop }));\n  }\n}\nconst arrayChange = new Set([\n  [].push,\n  [].pop,\n  [].shift,\n  [].unshift,\n  [].splice,\n  [].reverse,\n  [].sort,\n  [].copyWithin,\n]);\n\nexport class KeyVal {\n  constructor(public key: string | SpreadObject, public val: unknown) {}\n}\n\nexport class SpreadObject {\n  constructor(public item: { [key: string]: unknown }) {}\n}\n\nexport class SpreadArray {\n  constructor(public item: unknown[]) {}\n}\n\nexport class If {\n  constructor(public t: Lisp, public f: Lisp) {}\n}\n\nconst literalRegex = /(\\$\\$)*(\\$)?\\${(\\d+)}/g;\ntype OpCallback = (\n  exec: Execution,\n  done: Done,\n  ticks: Ticks,\n  a: any,\n  b: any,\n  obj: any,\n  context: IExecContext,\n  scope: Scope,\n  bobj?: any,\n  inLoopOrSwitch?: string\n) => void;\n\nexport const ops = new Map<LispType, OpCallback>();\nexport function addOps<Type extends LispFamily>(type: ExtractLispOp<Type>, cb: OpCallback) {\n  ops.set(type, cb);\n}\n\naddOps(LispType.Prop, (exec, done, ticks, a, b: string, obj, context, scope) => {\n  if (a === null) {\n    throw new TypeError(`Cannot get property ${b} of null`);\n  }\n  const type = typeof a;\n  if (type === 'undefined' && obj === undefined) {\n    const prop = scope.get(b);\n    if (prop.context === context.ctx.sandboxGlobal) {\n      if (context.ctx.options.audit) {\n        context.ctx.auditReport?.globalsAccess.add(b);\n      }\n      const rep = context.ctx.globalsWhitelist.has(context.ctx.sandboxGlobal[b])\n        ? context.evals.get(context.ctx.sandboxGlobal[b])\n        : undefined;\n      if (rep) {\n        done(undefined, rep);\n        return;\n      }\n    }\n    if (prop.context && prop.context[b] === globalThis) {\n      done(undefined, context.ctx.globalScope.get('this'));\n      return;\n    }\n\n    done(undefined, prop);\n    return;\n  } else if (a === undefined) {\n    throw new SandboxError(\"Cannot get property '\" + b + \"' of undefined\");\n  }\n\n  if (type !== 'object') {\n    if (type === 'number') {\n      a = new Number(a);\n    } else if (type === 'string') {\n      a = new String(a);\n    } else if (type === 'boolean') {\n      a = new Boolean(a);\n    }\n  } else if (typeof a.hasOwnProperty === 'undefined') {\n    done(undefined, new Prop(undefined, b));\n    return;\n  }\n\n  const isFunction = type === 'function';\n  const prototypeAccess = isFunction || !(a.hasOwnProperty(b) || typeof b === 'number');\n\n  if (context.ctx.options.audit && prototypeAccess) {\n    if (typeof b === 'string') {\n      let prot = Object.getPrototypeOf(a);\n      do {\n        if (prot.hasOwnProperty(b)) {\n          if (\n            context.ctx.auditReport &&\n            !context.ctx.auditReport.prototypeAccess[prot.constructor.name]\n          ) {\n            context.ctx.auditReport.prototypeAccess[prot.constructor.name] = new Set();\n          }\n          context.ctx.auditReport?.prototypeAccess[prot.constructor.name].add(b);\n        }\n      } while ((prot = Object.getPrototypeOf(prot)));\n    }\n  }\n\n  if (prototypeAccess) {\n    if (isFunction) {\n      if (!['name', 'length', 'constructor'].includes(b) && (a.hasOwnProperty(b) || b === '__proto__')) {\n        const whitelist = context.ctx.prototypeWhitelist.get(a.prototype);\n        const replace = context.ctx.options.prototypeReplacements.get(a);\n        if (replace) {\n          done(undefined, new Prop(replace(a, true), b));\n          return;\n        }\n        if (!(whitelist && (!whitelist.size || whitelist.has(b)))) {\n          throw new SandboxError(`Static method or property access not permitted: ${a.name}.${b}`);\n        }\n      }\n    } else if (b !== 'constructor') {\n      let prot = a;\n      while ((prot = Object.getPrototypeOf(prot))) {\n        if (prot.hasOwnProperty(b)) {\n          const whitelist = context.ctx.prototypeWhitelist.get(prot);\n          const replace = context.ctx.options.prototypeReplacements.get(prot.constuctor);\n          if (replace) {\n            done(undefined, new Prop(replace(a, false), b));\n            return;\n          }\n          if (whitelist && (!whitelist.size || whitelist.has(b))) {\n            break;\n          }\n          throw new SandboxError(\n            `Method or property access not permitted: ${prot.constructor.name}.${b}`\n          );\n        }\n      }\n    }\n  }\n\n  if (context.evals.has(a[b])) {\n    done(undefined, context.evals.get(a[b]));\n    return;\n  }\n  if (a[b] === globalThis) {\n    done(undefined, context.ctx.globalScope.get('this'));\n    return;\n  }\n\n  const g =\n    obj.isGlobal ||\n    (isFunction && !sandboxedFunctions.has(a)) ||\n    context.ctx.globalsWhitelist.has(a);\n\n  done(undefined, new Prop(a, b, false, g));\n});\n\naddOps(LispType.Call, (exec, done, ticks, a, b: Lisp[], obj, context) => {\n  if (context.ctx.options.forbidFunctionCalls)\n    throw new SandboxError('Function invocations are not allowed');\n  if (typeof a !== 'function') {\n    throw new TypeError(`${typeof obj.prop === 'symbol' ? 'Symbol' : obj.prop} is not a function`);\n  }\n  const vals = b\n    .map((item) => {\n      if (item instanceof SpreadArray) {\n        return [...item.item];\n      } else {\n        return [item];\n      }\n    })\n    .flat()\n    .map((item) => valueOrProp(item, context));\n\n  if (typeof obj === 'function') {\n    done(undefined, obj(...vals));\n    return;\n  }\n  if (obj.context[obj.prop] === JSON.stringify && context.getSubscriptions.size) {\n    const cache = new Set<any>();\n    const recurse = (x: unknown) => {\n      if (!x || !(typeof x === 'object') || cache.has(x)) return;\n      cache.add(x);\n      for (const y of Object.keys(x) as (keyof typeof x)[]) {\n        context.getSubscriptions.forEach((cb) => cb(x, y));\n        recurse(x[y]);\n      }\n    };\n    recurse(vals[0]);\n  }\n\n  if (\n    obj.context instanceof Array &&\n    arrayChange.has(obj.context[obj.prop]) &&\n    (context.changeSubscriptions.get(obj.context) ||\n      context.changeSubscriptionsGlobal.get(obj.context))\n  ) {\n    let change: Change;\n    let changed = false;\n    if (obj.prop === 'push') {\n      change = {\n        type: 'push',\n        added: vals,\n      };\n      changed = !!vals.length;\n    } else if (obj.prop === 'pop') {\n      change = {\n        type: 'pop',\n        removed: obj.context.slice(-1),\n      };\n      changed = !!change.removed.length;\n    } else if (obj.prop === 'shift') {\n      change = {\n        type: 'shift',\n        removed: obj.context.slice(0, 1),\n      };\n      changed = !!change.removed.length;\n    } else if (obj.prop === 'unshift') {\n      change = {\n        type: 'unshift',\n        added: vals,\n      };\n      changed = !!vals.length;\n    } else if (obj.prop === 'splice') {\n      change = {\n        type: 'splice',\n        startIndex: vals[0],\n        deleteCount: vals[1] === undefined ? obj.context.length : vals[1],\n        added: vals.slice(2),\n        removed: obj.context.slice(vals[0], vals[1] === undefined ? undefined : vals[0] + vals[1]),\n      };\n      changed = !!change.added.length || !!change.removed.length;\n    } else if (obj.prop === 'reverse' || obj.prop === 'sort') {\n      change = { type: obj.prop };\n      changed = !!obj.context.length;\n    } else if (obj.prop === 'copyWithin') {\n      const len =\n        vals[2] === undefined\n          ? obj.context.length - vals[1]\n          : Math.min(obj.context.length, vals[2] - vals[1]);\n      change = {\n        type: 'copyWithin',\n        startIndex: vals[0],\n        endIndex: vals[0] + len,\n        added: obj.context.slice(vals[1], vals[1] + len),\n        removed: obj.context.slice(vals[0], vals[0] + len),\n      };\n      changed = !!change.added.length || !!change.removed.length;\n    }\n    if (changed) {\n      context.changeSubscriptions.get(obj.context)?.forEach((cb) => cb(change));\n      context.changeSubscriptionsGlobal.get(obj.context)?.forEach((cb) => cb(change));\n    }\n  }\n  obj.get(context);\n  done(undefined, obj.context[obj.prop](...vals));\n});\n\naddOps(LispType.CreateObject, (exec, done, ticks, a, b: KeyVal[]) => {\n  let res = {} as any;\n  for (const item of b) {\n    if (item.key instanceof SpreadObject) {\n      res = { ...res, ...item.key.item };\n    } else {\n      res[item.key] = item.val;\n    }\n  }\n  done(undefined, res);\n});\n\naddOps(LispType.KeyVal, (exec, done, ticks, a: string, b: LispItem) =>\n  done(undefined, new KeyVal(a, b))\n);\n\naddOps(LispType.CreateArray, (exec, done, ticks, a, b: Lisp[], obj, context) => {\n  const items = b\n    .map((item) => {\n      if (item instanceof SpreadArray) {\n        return [...item.item];\n      } else {\n        return [item];\n      }\n    })\n    .flat()\n    .map((item) => valueOrProp(item, context));\n  done(undefined, items);\n});\n\naddOps(LispType.Group, (exec, done, ticks, a, b) => done(undefined, b));\n\naddOps(LispType.GlobalSymbol, (exec, done, ticks, a, b: string) => {\n  switch (b) {\n    case 'true':\n      return done(undefined, true);\n    case 'false':\n      return done(undefined, false);\n    case 'null':\n      return done(undefined, null);\n    case 'undefined':\n      return done(undefined, undefined);\n    case 'NaN':\n      return done(undefined, NaN);\n    case 'Infinity':\n      return done(undefined, Infinity);\n  }\n  done(new Error('Unknown symbol: ' + b));\n});\n\naddOps(LispType.Number, (exec, done, ticks, a, b) => done(undefined, Number(b)));\naddOps(LispType.BigInt, (exec, done, ticks, a, b) => done(undefined, BigInt(b)));\naddOps(LispType.StringIndex, (exec, done, ticks, a, b: string, obj, context) =>\n  done(undefined, context.constants.strings[parseInt(b)])\n);\n\naddOps(LispType.RegexIndex, (exec, done, ticks, a, b: string, obj, context) => {\n  const reg: IRegEx = context.constants.regexes[parseInt(b)];\n  if (!context.ctx.globalsWhitelist.has(RegExp)) {\n    throw new SandboxError('Regex not permitted');\n  } else {\n    done(undefined, new RegExp(reg.regex, reg.flags));\n  }\n});\n\naddOps(LispType.LiteralIndex, (exec, done, ticks, a, b: string, obj, context, scope) => {\n  const item = context.constants.literals[parseInt(b)];\n  const [, name, js] = item;\n  const found: Lisp[] = [];\n  let f: RegExpExecArray | null;\n  const resnums: string[] = [];\n  while ((f = literalRegex.exec(name))) {\n    if (!f[2]) {\n      found.push(js[parseInt(f[3], 10)]);\n      resnums.push(f[3]);\n    }\n  }\n\n  exec<unknown[]>(ticks, found, scope, context, (err, processed) => {\n    const reses: Record<string, unknown> = {};\n    if (err) {\n      done(err);\n      return;\n    }\n    for (const i of Object.keys(processed!) as (keyof typeof processed)[]) {\n      const num = resnums[i];\n      reses[num] = processed![i];\n    }\n    done(\n      undefined,\n      name.replace(/(\\\\\\\\)*(\\\\)?\\${(\\d+)}/g, (match, $$, $, num) => {\n        if ($) return match;\n        const res = reses[num];\n        return ($$ ? $$ : '') + `${valueOrProp(res, context)}`;\n      })\n    );\n  });\n});\n\naddOps(LispType.SpreadArray, (exec, done, ticks, a, b) => {\n  done(undefined, new SpreadArray(b));\n});\n\naddOps(LispType.SpreadObject, (exec, done, ticks, a, b) => {\n  done(undefined, new SpreadObject(b));\n});\n\naddOps(LispType.Not, (exec, done, ticks, a, b) => done(undefined, !b));\naddOps(LispType.Inverse, (exec, done, ticks, a, b) => done(undefined, ~b));\n\naddOps(LispType.IncrementBefore, (exec, done, ticks, a, b, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, ++obj.context[obj.prop]);\n});\n\naddOps(LispType.IncrementAfter, (exec, done, ticks, a, b, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, obj.context[obj.prop]++);\n});\n\naddOps(LispType.DecrementBefore, (exec, done, ticks, a, b, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, --obj.context[obj.prop]);\n});\n\naddOps(LispType.DecrementAfter, (exec, done, ticks, a, b, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, obj.context[obj.prop]--);\n});\n\naddOps(LispType.Assign, (exec, done, ticks, a, b, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] = b));\n});\n\naddOps(LispType.AddEquals, (exec, done, ticks, a, b, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] += b));\n});\n\naddOps(LispType.SubractEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] -= b));\n});\n\naddOps(LispType.DivideEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] /= b));\n});\n\naddOps(LispType.MultiplyEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] *= b));\n});\n\naddOps(LispType.PowerEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] **= b));\n});\n\naddOps(LispType.ModulusEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] %= b));\n});\n\naddOps(LispType.BitNegateEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] ^= b));\n});\n\naddOps(LispType.BitAndEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] &= b));\n});\n\naddOps(LispType.BitOrEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] |= b));\n});\n\naddOps(LispType.ShiftLeftEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] <<= b));\n});\n\naddOps(LispType.ShiftRightEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] >>= b));\n});\n\naddOps(LispType.UnsignedShiftRightEquals, (exec, done, ticks, a, b: number, obj, context) => {\n  assignCheck(obj, context);\n  done(undefined, (obj.context[obj.prop] >>= b));\n});\n\naddOps(LispType.LargerThan, (exec, done, ticks, a, b) => done(undefined, a > b));\naddOps(LispType.SmallerThan, (exec, done, ticks, a, b) => done(undefined, a < b));\naddOps(LispType.LargerEqualThan, (exec, done, ticks, a, b) => done(undefined, a >= b));\naddOps(LispType.SmallerEqualThan, (exec, done, ticks, a, b) => done(undefined, a <= b));\naddOps(LispType.Equal, (exec, done, ticks, a, b) => done(undefined, a == b));\naddOps(LispType.StrictEqual, (exec, done, ticks, a, b) => done(undefined, a === b));\naddOps(LispType.NotEqual, (exec, done, ticks, a, b) => done(undefined, a != b));\naddOps(LispType.StrictNotEqual, (exec, done, ticks, a, b) => done(undefined, a !== b));\naddOps(LispType.And, (exec, done, ticks, a, b) => done(undefined, a && b));\naddOps(LispType.Or, (exec, done, ticks, a, b) => done(undefined, a || b));\naddOps(LispType.BitAnd, (exec, done, ticks, a: number, b: number) => done(undefined, a & b));\naddOps(LispType.BitOr, (exec, done, ticks, a: number, b: number) => done(undefined, a | b));\naddOps(LispType.Plus, (exec, done, ticks, a: number, b: number) => done(undefined, a + b));\naddOps(LispType.Minus, (exec, done, ticks, a: number, b: number) => done(undefined, a - b));\naddOps(LispType.Positive, (exec, done, ticks, a, b) => done(undefined, +b));\naddOps(LispType.Negative, (exec, done, ticks, a, b) => done(undefined, -b));\naddOps(LispType.Divide, (exec, done, ticks, a: number, b: number) => done(undefined, a / b));\naddOps(LispType.BitNegate, (exec, done, ticks, a: number, b: number) => done(undefined, a ^ b));\naddOps(LispType.Multiply, (exec, done, ticks, a: number, b: number) => done(undefined, a * b));\naddOps(LispType.Modulus, (exec, done, ticks, a: number, b: number) => done(undefined, a % b));\naddOps(LispType.BitShiftLeft, (exec, done, ticks, a: number, b: number) => done(undefined, a << b));\naddOps(LispType.BitShiftRight, (exec, done, ticks, a: number, b: number) =>\n  done(undefined, a >> b)\n);\naddOps(LispType.BitUnsignedShiftRight, (exec, done, ticks, a: number, b: number) =>\n  done(undefined, a >>> b)\n);\naddOps(LispType.Typeof, (exec, done, ticks, a, b: LispItem, obj, context, scope) => {\n  exec(ticks, b, scope, context, (e, prop) => {\n    done(undefined, typeof valueOrProp(prop, context));\n  });\n});\n\naddOps(LispType.Instanceof, (exec, done, ticks, a, b: { new (): unknown }) =>\n  done(undefined, a instanceof b)\n);\naddOps(LispType.In, (exec, done, ticks, a: string, b) => done(undefined, a in b));\n\naddOps(LispType.Delete, (exec, done, ticks, a, b, obj, context, scope, bobj: Prop) => {\n  if (bobj.context === undefined) {\n    done(undefined, true);\n    return;\n  }\n  assignCheck(bobj, context, 'delete');\n  if (bobj.isVariable) {\n    done(undefined, false);\n    return;\n  }\n  done(undefined, delete bobj.context?.[bobj.prop]);\n});\n\naddOps(LispType.Return, (exec, done, ticks, a, b) => done(undefined, b));\n\naddOps(LispType.Var, (exec, done, ticks, a: string, b: LispItem, obj, context, scope) => {\n  done(undefined, scope.declare(a, VarType.var, b));\n});\n\naddOps(LispType.Let, (exec, done, ticks, a: string, b: LispItem, obj, context, scope, bobj) => {\n  done(undefined, scope.declare(a, VarType.let, b, bobj && bobj.isGlobal));\n});\n\naddOps(LispType.Const, (exec, done, ticks, a: string, b: LispItem, obj, context, scope) => {\n  done(undefined, scope.declare(a, VarType.const, b));\n});\n\naddOps(\n  LispType.ArrowFunction,\n  (exec, done, ticks, a: string[], b: Lisp[], obj: Lisp, context, scope) => {\n    a = [...a];\n    if (typeof obj[2] === 'string' || obj[2] instanceof CodeString) {\n      if (context.allowJit && context.evalContext) {\n        obj[2] = b = context.evalContext.lispifyFunction(new CodeString(obj[2]), context.constants);\n      } else {\n        throw new SandboxError('Unevaluated code detected, JIT not allowed');\n      }\n    }\n    if (a.shift()) {\n      done(undefined, createFunctionAsync(a, b, ticks, context, scope));\n    } else {\n      done(undefined, createFunction(a, b, ticks, context, scope));\n    }\n  }\n);\n\naddOps(\n  LispType.Function,\n  (exec, done, ticks, a: (string | LispType)[], b: Lisp[], obj: Lisp, context, scope) => {\n    if (typeof obj[2] === 'string' || obj[2] instanceof CodeString) {\n      if (context.allowJit && context.evalContext) {\n        obj[2] = b = context.evalContext.lispifyFunction(new CodeString(obj[2]), context.constants);\n      } else {\n        throw new SandboxError('Unevaluated code detected, JIT not allowed');\n      }\n    }\n    const isAsync = a.shift();\n    const name = a.shift() as string;\n    let func;\n    if (isAsync === LispType.True) {\n      func = createFunctionAsync(a as string[], b, ticks, context, scope, name);\n    } else {\n      func = createFunction(a as string[], b, ticks, context, scope, name);\n    }\n    if (name) {\n      scope.declare(name, VarType.var, func);\n    }\n    done(undefined, func);\n  }\n);\n\naddOps(\n  LispType.InlineFunction,\n  (exec, done, ticks, a: (string | LispType)[], b: Lisp[], obj: Lisp, context, scope) => {\n    if (typeof obj[2] === 'string' || obj[2] instanceof CodeString) {\n      if (context.allowJit && context.evalContext) {\n        obj[2] = b = context.evalContext.lispifyFunction(new CodeString(obj[2]), context.constants);\n      } else {\n        throw new SandboxError('Unevaluated code detected, JIT not allowed');\n      }\n    }\n    const isAsync = a.shift();\n    const name = a.shift() as string;\n    if (name) {\n      scope = new Scope(scope, {});\n    }\n    let func;\n    if (isAsync === LispType.True) {\n      func = createFunctionAsync(a as string[], b, ticks, context, scope, name);\n    } else {\n      func = createFunction(a as string[], b, ticks, context, scope, name);\n    }\n    if (name) {\n      scope.declare(name, VarType.let, func);\n    }\n    done(undefined, func);\n  }\n);\n\naddOps(LispType.Loop, (exec, done, ticks, a: Lisp[], b: Lisp[], obj, context, scope) => {\n  const [checkFirst, startInternal, getIterator, startStep, step, condition, beforeStep] = a;\n  let loop = true;\n  const loopScope = new Scope(scope, {});\n  const internalVars = {\n    $$obj: undefined,\n  };\n  const interalScope = new Scope(loopScope, internalVars);\n  if (exec === execAsync) {\n    (async () => {\n      let ad: AsyncDoneRet;\n      ad = asyncDone((d) => exec(ticks, startStep, loopScope, context, d));\n      internalVars['$$obj'] =\n        (ad = asyncDone((d) => exec(ticks, getIterator, loopScope, context, d))).isInstant === true\n          ? ad.instant\n          : (await ad.p).result;\n      ad = asyncDone((d) => exec(ticks, startInternal, interalScope, context, d));\n      if (checkFirst)\n        loop =\n          (ad = asyncDone((d) => exec(ticks, condition, interalScope, context, d))).isInstant ===\n          true\n            ? ad.instant\n            : (await ad.p).result;\n      while (loop) {\n        const innerLoopVars = {};\n        ad = asyncDone((d) =>\n          exec(ticks, beforeStep, new Scope(interalScope, innerLoopVars), context, d)\n        );\n        ad.isInstant === true ? ad.instant : (await ad.p).result;\n        const res = await executeTreeAsync(\n          ticks,\n          context,\n          b,\n          [new Scope(loopScope, innerLoopVars)],\n          'loop'\n        );\n        if (res instanceof ExecReturn && res.returned) {\n          done(undefined, res);\n          return;\n        }\n        if (res instanceof ExecReturn && res.breakLoop) {\n          break;\n        }\n        ad = asyncDone((d) => exec(ticks, step, interalScope, context, d));\n        loop =\n          (ad = asyncDone((d) => exec(ticks, condition, interalScope, context, d))).isInstant ===\n          true\n            ? ad.instant\n            : (await ad.p).result;\n      }\n      done();\n    })().catch(done);\n  } else {\n    syncDone((d) => exec(ticks, startStep, loopScope, context, d));\n    internalVars['$$obj'] = syncDone((d) => exec(ticks, getIterator, loopScope, context, d)).result;\n    syncDone((d) => exec(ticks, startInternal, interalScope, context, d));\n    if (checkFirst) loop = syncDone((d) => exec(ticks, condition, interalScope, context, d)).result;\n    while (loop) {\n      const innerLoopVars = {};\n      syncDone((d) => exec(ticks, beforeStep, new Scope(interalScope, innerLoopVars), context, d));\n      const res = executeTree(ticks, context, b, [new Scope(loopScope, innerLoopVars)], 'loop');\n      if (res instanceof ExecReturn && res.returned) {\n        done(undefined, res);\n        return;\n      }\n      if (res instanceof ExecReturn && res.breakLoop) {\n        break;\n      }\n      syncDone((d) => exec(ticks, step, interalScope, context, d));\n      loop = syncDone((d) => exec(ticks, condition, interalScope, context, d)).result;\n    }\n    done();\n  }\n});\n\naddOps(\n  LispType.LoopAction,\n  (exec, done, ticks, a: LispItem, b: LispItem, obj, context, scope, bobj, inLoopOrSwitch) => {\n    if ((inLoopOrSwitch === 'switch' && a === 'continue') || !inLoopOrSwitch) {\n      throw new SandboxError('Illegal ' + a + ' statement');\n    }\n    done(\n      undefined,\n      new ExecReturn(context.ctx.auditReport, undefined, false, a === 'break', a === 'continue')\n    );\n  }\n);\n\naddOps(\n  LispType.If,\n  (exec, done, ticks, a: LispItem, b: If, obj, context, scope) => {\n    exec(ticks, valueOrProp(a, context) ? b.t : b.f, scope, context, done);\n  }\n);\n\naddOps(LispType.InlineIf, (exec, done, ticks, a: LispItem, b: If, obj, context, scope) => {\n  exec(ticks, valueOrProp(a, context) ? b.t : b.f, scope, context, done);\n});\naddOps(LispType.InlineIfCase, (exec, done, ticks, a, b) => done(undefined, new If(a, b)));\naddOps(LispType.IfCase, (exec, done, ticks, a, b) => done(undefined, new If(a, b)));\n\naddOps(LispType.Switch, (exec, done, ticks, a: LispItem, b: SwitchCase[], obj, context, scope) => {\n  exec(ticks, a, scope, context, (err, toTest) => {\n    if (err) {\n      done(err);\n      return;\n    }\n    toTest = valueOrProp(toTest, context);\n    if (exec === execSync) {\n      let res: ExecReturn<unknown>;\n      let isTrue = false;\n      for (const caseItem of b) {\n        if (\n          isTrue ||\n          (isTrue =\n            !caseItem[1] ||\n            toTest ===\n              valueOrProp(\n                syncDone((d) => exec(ticks, caseItem[1], scope, context, d)).result,\n                context\n              ))\n        ) {\n          if (!caseItem[2]) continue;\n          res = executeTree(ticks, context, caseItem[2], [scope], 'switch');\n          if (res.breakLoop) break;\n          if (res.returned) {\n            done(undefined, res);\n            return;\n          }\n          if (!caseItem[1]) {\n            // default case\n            break;\n          }\n        }\n      }\n      done();\n    } else {\n      (async () => {\n        let res: ExecReturn<unknown>;\n        let isTrue = false;\n        for (const caseItem of b) {\n          let ad: AsyncDoneRet;\n          if (\n            isTrue ||\n            (isTrue =\n              !caseItem[1] ||\n              toTest ===\n                valueOrProp(\n                  (ad = asyncDone((d) => exec(ticks, caseItem[1], scope, context, d))).isInstant ===\n                    true\n                    ? ad.instant\n                    : (await ad.p).result,\n                  context\n                ))\n          ) {\n            if (!caseItem[2]) continue;\n            res = await executeTreeAsync(ticks, context, caseItem[2], [scope], 'switch');\n            if (res.breakLoop) break;\n            if (res.returned) {\n              done(undefined, res);\n              return;\n            }\n            if (!caseItem[1]) {\n              // default case\n              break;\n            }\n          }\n        }\n        done();\n      })().catch(done);\n    }\n  });\n});\n\naddOps(\n  LispType.Try,\n  (\n    exec,\n    done,\n    ticks,\n    a: Lisp[],\n    b: [string, Lisp[], Lisp[]],\n    obj,\n    context,\n    scope,\n    bobj,\n    inLoopOrSwitch\n  ) => {\n    const [exception, catchBody, finallyBody] = b;\n    executeTreeWithDone(\n      exec,\n      (err, res) => {\n        executeTreeWithDone(\n          exec,\n          (e) => {\n            if (e) done(e);\n            else if (err) {\n              const sc: Record<string, unknown> = {};\n              if (exception) sc[exception] = err;\n              executeTreeWithDone(\n                exec,\n                done,\n                ticks,\n                context,\n                catchBody,\n                [new Scope(scope)],\n                inLoopOrSwitch\n              );\n            } else {\n              done(undefined, res);\n            }\n          },\n          ticks,\n          context,\n          finallyBody,\n          [new Scope(scope, {})]\n        );\n      },\n      ticks,\n      context,\n      a,\n      [new Scope(scope)],\n      inLoopOrSwitch\n    );\n  }\n);\n\naddOps(LispType.Void, (exec, done) => {\n  done();\n});\naddOps(\n  LispType.New,\n  (exec, done, ticks, a: new (...args: unknown[]) => unknown, b: unknown[], obj, context) => {\n    if (!context.ctx.globalsWhitelist.has(a) && !sandboxedFunctions.has(a)) {\n      throw new SandboxError(`Object construction not allowed: ${a.constructor.name}`);\n    }\n    done(undefined, new a(...b));\n  }\n);\n\naddOps(LispType.Throw, (exec, done, ticks, a, b) => {\n  done(b);\n});\naddOps(LispType.Expression, (exec, done, ticks, a: unknown[]) => done(undefined, a.pop()));\naddOps(LispType.None, (exec, done) => done());\n\nfunction valueOrProp(a: unknown, context: IExecContext): any {\n  if (a instanceof Prop) return a.get(context);\n  if (a === optional) return undefined;\n  return a;\n}\n\nexport function execMany(\n  ticks: Ticks,\n  exec: Execution,\n  tree: Lisp[],\n  done: Done,\n  scope: Scope,\n  context: IExecContext,\n  inLoopOrSwitch?: string\n) {\n  if (exec === execSync) {\n    _execManySync(ticks, tree, done, scope, context, inLoopOrSwitch);\n  } else {\n    _execManyAsync(ticks, tree, done, scope, context, inLoopOrSwitch).catch(done);\n  }\n}\n\nfunction _execManySync(\n  ticks: Ticks,\n  tree: Lisp[],\n  done: Done,\n  scope: Scope,\n  context: IExecContext,\n  inLoopOrSwitch?: string\n) {\n  const ret: any[] = [];\n  for (let i = 0; i < tree.length; i++) {\n    let res;\n    try {\n      res = syncDone((d) => execSync(ticks, tree[i], scope, context, d, inLoopOrSwitch)).result;\n    } catch (e) {\n      done(e);\n      return;\n    }\n    if (res instanceof ExecReturn && (res.returned || res.breakLoop || res.continueLoop)) {\n      done(undefined, res);\n      return;\n    }\n    if (isLisp(tree[i]) && tree[i][0] === LispType.Return) {\n      done(undefined, new ExecReturn(context.ctx.auditReport, res, true));\n      return;\n    }\n    ret.push(res);\n  }\n  done(undefined, ret);\n}\n\nasync function _execManyAsync(\n  ticks: Ticks,\n  tree: Lisp[],\n  done: Done,\n  scope: Scope,\n  context: IExecContext,\n  inLoopOrSwitch?: string\n) {\n  const ret: any[] = [];\n  for (let i = 0; i < tree.length; i++) {\n    let res;\n    try {\n      let ad: AsyncDoneRet;\n      res =\n        (ad = asyncDone((d) => execAsync(ticks, tree[i], scope, context, d, inLoopOrSwitch)))\n          .isInstant === true\n          ? ad.instant\n          : (await ad.p).result;\n    } catch (e) {\n      done(e);\n      return;\n    }\n    if (res instanceof ExecReturn && (res.returned || res.breakLoop || res.continueLoop)) {\n      done(undefined, res);\n      return;\n    }\n    if (isLisp(tree[i]) && tree[i][0] === LispType.Return) {\n      done(undefined, new ExecReturn(context.ctx.auditReport, res, true));\n      return;\n    }\n    ret.push(res);\n  }\n  done(undefined, ret);\n}\n\ntype Execution = <T = any>(\n  ticks: Ticks,\n  tree: LispItem,\n  scope: Scope,\n  context: IExecContext,\n  done: Done<T>,\n  inLoopOrSwitch?: string\n) => void;\n\nexport interface AsyncDoneRet {\n  isInstant: boolean;\n  instant: any;\n  p: Promise<{ result: any }>;\n}\n\nexport function asyncDone(callback: (done: Done) => void): AsyncDoneRet {\n  let isInstant = false;\n  let instant: unknown;\n  const p = new Promise<any>((resolve, reject) => {\n    callback((err, result) => {\n      if (err) reject(err);\n      else {\n        isInstant = true;\n        instant = result;\n        resolve({ result });\n      }\n    });\n  });\n  return {\n    isInstant,\n    instant,\n    p,\n  };\n}\n\nexport function syncDone(callback: (done: Done) => void): { result: any } {\n  let result;\n  let err;\n  callback((e, r) => {\n    err = e;\n    result = r;\n  });\n  if (err) throw err;\n  return { result };\n}\n\nexport async function execAsync<T = any>(\n  ticks: Ticks,\n  tree: LispItem,\n  scope: Scope,\n  context: IExecContext,\n  doneOriginal: Done<T>,\n  inLoopOrSwitch?: string\n): Promise<void> {\n  let done: Done<T> = doneOriginal;\n  const p = new Promise<void>((resolve) => {\n    done = (e, r?) => {\n      doneOriginal(e, r);\n      resolve();\n    };\n  });\n  if (!_execNoneRecurse(ticks, tree, scope, context, done, true, inLoopOrSwitch) && isLisp(tree)) {\n    let op = tree[0];\n    let obj;\n    try {\n      let ad: AsyncDoneRet;\n      obj =\n        (ad = asyncDone((d) => execAsync(ticks, tree[1], scope, context, d, inLoopOrSwitch)))\n          .isInstant === true\n          ? ad.instant\n          : (await ad.p).result;\n    } catch (e) {\n      done(e);\n      return;\n    }\n    let a = obj;\n    try {\n      a = obj instanceof Prop ? obj.get(context) : obj;\n    } catch (e) {\n      done(e);\n      return;\n    }\n    if (op === LispType.PropOptional || op === LispType.CallOptional) {\n      if (a === undefined || a === null) {\n        done(undefined, optional);\n        return;\n      }\n      op = op === LispType.PropOptional ? LispType.Prop : LispType.Call;\n    }\n    if (a === optional) {\n      if (op === LispType.Prop || op === LispType.Call) {\n        done(undefined, a);\n        return;\n      } else {\n        a = undefined;\n      }\n    }\n    let bobj;\n    try {\n      let ad: AsyncDoneRet;\n      bobj =\n        (ad = asyncDone((d) => execAsync(ticks, tree[2], scope, context, d, inLoopOrSwitch)))\n          .isInstant === true\n          ? ad.instant\n          : (await ad.p).result;\n    } catch (e) {\n      done(e);\n      return;\n    }\n    let b = bobj;\n    try {\n      b = bobj instanceof Prop ? bobj.get(context) : bobj;\n    } catch (e) {\n      done(e);\n      return;\n    }\n    if (b === optional) {\n      b = undefined;\n    }\n    if (ops.has(op)) {\n      try {\n        ops.get(op)?.(execAsync, done, ticks, a, b, obj, context, scope, bobj, inLoopOrSwitch);\n      } catch (err) {\n        done(err);\n      }\n    } else {\n      done(new SyntaxError('Unknown operator: ' + op));\n    }\n  }\n  await p;\n}\n\nexport function execSync<T = any>(\n  ticks: Ticks,\n  tree: LispItem,\n  scope: Scope,\n  context: IExecContext,\n  done: Done<T>,\n  inLoopOrSwitch?: string\n) {\n  if (!_execNoneRecurse(ticks, tree, scope, context, done, false, inLoopOrSwitch) && isLisp(tree)) {\n    let op = tree[0];\n    let obj;\n    try {\n      obj = syncDone((d) => execSync(ticks, tree[1], scope, context, d, inLoopOrSwitch)).result;\n    } catch (e) {\n      done(e);\n      return;\n    }\n    let a = obj;\n    try {\n      a = obj instanceof Prop ? obj.get(context) : obj;\n    } catch (e) {\n      done(e);\n      return;\n    }\n    if (op === LispType.PropOptional || op === LispType.CallOptional) {\n      if (a === undefined || a === null) {\n        done(undefined, optional);\n        return;\n      }\n      op = op === LispType.PropOptional ? LispType.Prop : LispType.Call;\n    }\n    if (a === optional) {\n      if (op === LispType.Prop || op === LispType.Call) {\n        done(undefined, a);\n        return;\n      } else {\n        a = undefined;\n      }\n    }\n    let bobj;\n    try {\n      bobj = syncDone((d) => execSync(ticks, tree[2], scope, context, d, inLoopOrSwitch)).result;\n    } catch (e) {\n      done(e);\n      return;\n    }\n    let b = bobj;\n    try {\n      b = bobj instanceof Prop ? bobj.get(context) : bobj;\n    } catch (e) {\n      done(e);\n      return;\n    }\n    if (b === optional) {\n      b = undefined;\n    }\n    if (ops.has(op)) {\n      try {\n        ops.get(op)?.(execSync, done, ticks, a, b, obj, context, scope, bobj, inLoopOrSwitch);\n      } catch (err) {\n        done(err);\n      }\n    } else {\n      done(new SyntaxError('Unknown operator: ' + op));\n    }\n  }\n}\n\nconst unexecTypes = new Set([\n  LispType.ArrowFunction,\n  LispType.Function,\n  LispType.InlineFunction,\n  LispType.Loop,\n  LispType.Try,\n  LispType.Switch,\n  LispType.IfCase,\n  LispType.InlineIfCase,\n  LispType.Typeof,\n]);\n\nexport const currentTicks = { current: { ticks: BigInt(0) } as Ticks };\n\nfunction _execNoneRecurse<T = any>(\n  ticks: Ticks,\n  tree: LispItem,\n  scope: Scope,\n  context: IExecContext,\n  done: Done<T>,\n  isAsync: boolean,\n  inLoopOrSwitch?: string\n): boolean {\n  const exec = isAsync ? execAsync : execSync;\n  if (context.ctx.options.executionQuota && context.ctx.options.executionQuota <= ticks.ticks) {\n    if (\n      !(\n        typeof context.ctx.options.onExecutionQuotaReached === 'function' &&\n        context.ctx.options.onExecutionQuotaReached(ticks, scope, context, tree)\n      )\n    ) {\n      done(new SandboxError('Execution quota exceeded'));\n      return true;\n    }\n  }\n  ticks.ticks++;\n  currentTicks.current = ticks;\n  if (tree instanceof Prop) {\n    try {\n      done(undefined, tree.get(context));\n    } catch (err) {\n      done(err);\n    }\n  } else if (tree === optional) {\n    done();\n  } else if (Array.isArray(tree) && !isLisp(tree)) {\n    if (tree[0] === LispType.None) {\n      done();\n    } else {\n      execMany(ticks, exec, tree as Lisp[], done, scope, context, inLoopOrSwitch);\n    }\n  } else if (!isLisp(tree)) {\n    done(undefined, tree);\n  } else if (tree[0] === LispType.Block) {\n    execMany(ticks, exec, tree[1] as Lisp[], done, scope, context, inLoopOrSwitch);\n  } else if (tree[0] === LispType.Await) {\n    if (!isAsync) {\n      done(new SandboxError(\"Illegal use of 'await', must be inside async function\"));\n    } else if (context.ctx.prototypeWhitelist?.has(Promise.prototype)) {\n      execAsync(\n        ticks,\n        tree[1],\n        scope,\n        context,\n        async (e, r) => {\n          if (e) done(e);\n          else\n            try {\n              done(undefined, await valueOrProp(r, context));\n            } catch (err) {\n              done(err);\n            }\n        },\n        inLoopOrSwitch\n      ).catch(done);\n    } else {\n      done(new SandboxError('Async/await is not permitted'));\n    }\n  } else if (unexecTypes.has(tree[0])) {\n    try {\n      ops.get(tree[0])?.(\n        exec,\n        done,\n        ticks,\n        tree[1],\n        tree[2],\n        tree,\n        context,\n        scope,\n        undefined,\n        inLoopOrSwitch\n      );\n    } catch (err) {\n      done(err);\n    }\n  } else {\n    return false;\n  }\n  return true;\n}\nexport function executeTree<T>(\n  ticks: Ticks,\n  context: IExecContext,\n  executionTree: Lisp[],\n  scopes: IScope[] = [],\n  inLoopOrSwitch?: string\n): ExecReturn<T> {\n  return syncDone((done) =>\n    executeTreeWithDone(execSync, done, ticks, context, executionTree, scopes, inLoopOrSwitch)\n  ).result;\n}\n\nexport async function executeTreeAsync<T>(\n  ticks: Ticks,\n  context: IExecContext,\n  executionTree: Lisp[],\n  scopes: IScope[] = [],\n  inLoopOrSwitch?: string\n): Promise<ExecReturn<T>> {\n  let ad: AsyncDoneRet;\n  return (ad = asyncDone((done) =>\n    executeTreeWithDone(execAsync, done, ticks, context, executionTree, scopes, inLoopOrSwitch)\n  )).isInstant === true\n    ? ad.instant\n    : (await ad.p).result;\n}\n\nfunction executeTreeWithDone(\n  exec: Execution,\n  done: Done,\n  ticks: Ticks,\n  context: IExecContext,\n  executionTree: Lisp[],\n  scopes: IScope[] = [],\n  inLoopOrSwitch?: string\n) {\n  if (!executionTree) {\n    done();\n    return;\n  }\n  if (!(executionTree instanceof Array)) {\n    throw new SyntaxError('Bad execution tree');\n  }\n  let scope = context.ctx.globalScope;\n  let s;\n  while ((s = scopes.shift())) {\n    if (typeof s !== 'object') continue;\n    if (s instanceof Scope) {\n      scope = s;\n    } else {\n      scope = new Scope(scope, s, s instanceof LocalScope ? undefined : null);\n    }\n  }\n  if (context.ctx.options.audit && !context.ctx.auditReport) {\n    context.ctx.auditReport = {\n      globalsAccess: new Set(),\n      prototypeAccess: {},\n    };\n  }\n  if (exec === execSync) {\n    _executeWithDoneSync(done, ticks, context, executionTree, scope, inLoopOrSwitch);\n  } else {\n    _executeWithDoneAsync(done, ticks, context, executionTree, scope, inLoopOrSwitch).catch(done);\n  }\n}\n\nfunction _executeWithDoneSync(\n  done: Done,\n  ticks: Ticks,\n  context: IExecContext,\n  executionTree: Lisp[],\n  scope: Scope,\n  inLoopOrSwitch?: string\n) {\n  if (!(executionTree instanceof Array)) throw new SyntaxError('Bad execution tree');\n  let i = 0;\n  for (i = 0; i < executionTree.length; i++) {\n    let res: unknown;\n    let err: unknown;\n    const current = executionTree[i];\n    try {\n      execSync(\n        ticks,\n        current,\n        scope,\n        context,\n        (e, r) => {\n          err = e;\n          res = r;\n        },\n        inLoopOrSwitch\n      );\n    } catch (e) {\n      err = e;\n    }\n    if (err) {\n      done(err);\n      return;\n    }\n    if (res instanceof ExecReturn) {\n      done(undefined, res);\n      return;\n    }\n    if (isLisp(current) && current[0] === LispType.Return) {\n      done(undefined, new ExecReturn(context.ctx.auditReport, res, true));\n      return;\n    }\n  }\n  done(undefined, new ExecReturn(context.ctx.auditReport, undefined, false));\n}\n\nasync function _executeWithDoneAsync(\n  done: Done,\n  ticks: Ticks,\n  context: IExecContext,\n  executionTree: Lisp[],\n  scope: Scope,\n  inLoopOrSwitch?: string\n) {\n  if (!(executionTree instanceof Array)) throw new SyntaxError('Bad execution tree');\n  let i = 0;\n  for (i = 0; i < executionTree.length; i++) {\n    let res: unknown;\n    let err: unknown;\n    const current = executionTree[i];\n    try {\n      await execAsync(\n        ticks,\n        current,\n        scope,\n        context,\n        (e, r) => {\n          err = e;\n          res = r;\n        },\n        inLoopOrSwitch\n      );\n    } catch (e) {\n      err = e;\n    }\n    if (err) {\n      done(err);\n      return;\n    }\n    if (res instanceof ExecReturn) {\n      done(undefined, res);\n      return;\n    }\n    if (isLisp(current) && current[0] === LispType.Return) {\n      done(undefined, new ExecReturn(context.ctx.auditReport, res, true));\n      return;\n    }\n  }\n  done(undefined, new ExecReturn(context.ctx.auditReport, undefined, false));\n}\n","/**\n * Parse a string as a base-16 number. This is more strict than `parseInt` as it\n * will not allow any other characters, including (for example) \"+\", \"-\", and\n * \".\".\n * @param hex A string containing a hexadecimal number.\n * @returns The parsed integer, or `NaN` if the string is not a valid hex\n * number.\n */\nfunction parseHexToInt(hex: string): number {\n  const isOnlyHexChars = !hex.match(/[^a-f0-9]/i);\n  return isOnlyHexChars ? parseInt(hex, 16) : NaN;\n}\n\n/**\n * Check the validity and length of a hexadecimal code and optionally enforces\n * a specific number of hex digits.\n * @param hex The string to validate and parse.\n * @param errorName The name of the error message to throw a `SyntaxError` with\n * if `hex` is invalid. This is used to index `errorMessages`.\n * @param enforcedLength If provided, will throw an error if `hex` is not\n * exactly this many characters.\n * @returns The parsed hex number as a normal number.\n * @throws {SyntaxError} If the code is not valid.\n */\nfunction validateAndParseHex(hex: string, errorName: string, enforcedLength?: number): number {\n  const parsedHex = parseHexToInt(hex);\n  if (Number.isNaN(parsedHex) || (enforcedLength !== undefined && enforcedLength !== hex.length)) {\n    throw new SyntaxError(errorName + ': ' + hex);\n  }\n  return parsedHex;\n}\n\n/**\n * Parse a two-digit hexadecimal character escape code.\n * @param code The two-digit hexadecimal number that represents the character to\n * output.\n * @returns The single character represented by the code.\n * @throws {SyntaxError} If the code is not valid hex or is not the right\n * length.\n */\nfunction parseHexadecimalCode(code: string): string {\n  const parsedCode = validateAndParseHex(code, 'Malformed Hexadecimal', 2);\n  return String.fromCharCode(parsedCode);\n}\n\n/**\n * Parse a four-digit Unicode character escape code.\n * @param code The four-digit unicode number that represents the character to\n * output.\n * @param surrogateCode Optional four-digit unicode surrogate that represents\n * the other half of the character to output.\n * @returns The single character represented by the code.\n * @throws {SyntaxError} If the codes are not valid hex or are not the right\n * length.\n */\nfunction parseUnicodeCode(code: string, surrogateCode?: string): string {\n  const parsedCode = validateAndParseHex(code, 'Malformed Unicode', 4);\n\n  if (surrogateCode !== undefined) {\n    const parsedSurrogateCode = validateAndParseHex(surrogateCode, 'Malformed Unicode', 4);\n    return String.fromCharCode(parsedCode, parsedSurrogateCode);\n  }\n\n  return String.fromCharCode(parsedCode);\n}\n\n/**\n * Test if the text is surrounded by curly braces (`{}`).\n * @param text Text to check.\n * @returns `true` if the text is in the form `{*}`.\n */\nfunction isCurlyBraced(text: string): boolean {\n  return text.charAt(0) === '{' && text.charAt(text.length - 1) === '}';\n}\n\n/**\n * Parse a Unicode code point character escape code.\n * @param codePoint A unicode escape code point, including the surrounding curly\n * braces.\n * @returns The single character represented by the code.\n * @throws {SyntaxError} If the code is not valid hex or does not have the\n * surrounding curly braces.\n */\nfunction parseUnicodeCodePointCode(codePoint: string): string {\n  if (!isCurlyBraced(codePoint)) {\n    throw new SyntaxError('Malformed Unicode: +' + codePoint);\n  }\n  const withoutBraces = codePoint.slice(1, -1);\n  const parsedCode = validateAndParseHex(withoutBraces, 'Malformed Unicode');\n\n  try {\n    return String.fromCodePoint(parsedCode);\n  } catch (err) {\n    throw err instanceof RangeError ? new SyntaxError('Code Point Limit:' + parsedCode) : err;\n  }\n}\n\n/**\n * Map of unescaped letters to their corresponding special JS escape characters.\n * Intentionally does not include characters that map to themselves like \"\\'\".\n */\nconst singleCharacterEscapes = new Map<string, string>([\n  ['b', '\\b'],\n  ['f', '\\f'],\n  ['n', '\\n'],\n  ['r', '\\r'],\n  ['t', '\\t'],\n  ['v', '\\v'],\n  ['0', '\\0'],\n]);\n\n/**\n * Parse a single character escape sequence and return the matching character.\n * If none is matched, defaults to `code`.\n * @param code A single character code.\n */\nfunction parseSingleCharacterCode(code: string): string {\n  return singleCharacterEscapes.get(code) || code;\n}\n\n/**\n * Matches every escape sequence possible, including invalid ones.\n *\n * All capture groups (described below) are unique (only one will match), except\n * for 4, which can only potentially match if 3 does.\n *\n * **Capture Groups:**\n * 0. A single backslash\n * 1. Hexadecimal code\n * 2. Unicode code point code with surrounding curly braces\n * 3. Unicode escape code with surrogate\n * 4. Surrogate code\n * 5. Unicode escape code without surrogate\n * 6. Octal code _NOTE: includes \"0\"._\n * 7. A single character (will never be \\, x, u, or 0-3)\n */\nconst escapeMatch =\n  /\\\\(?:(\\\\)|x([\\s\\S]{0,2})|u(\\{[^}]*\\}?)|u([\\s\\S]{4})\\\\u([^{][\\s\\S]{0,3})|u([\\s\\S]{0,4})|([0-3]?[0-7]{1,2})|([\\s\\S])|$)/g;\n\n/**\n * Replace raw escape character strings with their escape characters.\n * @param raw A string where escape characters are represented as raw string\n * values like `\\'` rather than `'`.\n * @param allowOctals If `true`, will process the now-deprecated octal escape\n * sequences (ie, `\\111`).\n * @returns The processed string, with escape characters replaced by their\n * respective actual Unicode characters.\n */\nexport function unraw(raw: string): string {\n  return raw.replace(\n    escapeMatch,\n    function (\n      _,\n      backslash?: string,\n      hex?: string,\n      codePoint?: string,\n      unicodeWithSurrogate?: string,\n      surrogate?: string,\n      unicode?: string,\n      octal?: string,\n      singleCharacter?: string\n    ): string {\n      // Compare groups to undefined because empty strings mean different errors\n      // Otherwise, `\\u` would fail the same as `\\` which is wrong.\n      if (backslash !== undefined) {\n        return '\\\\';\n      }\n      if (hex !== undefined) {\n        return parseHexadecimalCode(hex);\n      }\n      if (codePoint !== undefined) {\n        return parseUnicodeCodePointCode(codePoint);\n      }\n      if (unicodeWithSurrogate !== undefined) {\n        return parseUnicodeCode(unicodeWithSurrogate, surrogate);\n      }\n      if (unicode !== undefined) {\n        return parseUnicodeCode(unicode);\n      }\n      if (octal === '0') {\n        return '\\0';\n      }\n      if (octal !== undefined) {\n        throw new SyntaxError('Octal Deprecation: ' + octal);\n      }\n      if (singleCharacter !== undefined) {\n        return parseSingleCharacterCode(singleCharacter);\n      }\n      throw new SyntaxError('End of string');\n    }\n  );\n}\nexport default unraw;\n","import unraw from './unraw.js';\nimport { CodeString, isLisp, LispType } from './utils.js';\n\nexport type DefineLisp<\n  op extends LispType,\n  a extends LispItem | LispItem,\n  b extends LispItem | LispItem\n> = [op, a, b];\n\nexport type ExtractLispOp<L> = L extends DefineLisp<infer i, any, any> ? i : never;\nexport type ExtractLispA<L> = L extends DefineLisp<any, infer i, any> ? i : never;\nexport type ExtractLispB<L> = L extends DefineLisp<any, any, infer i> ? i : never;\n\nexport type LispItemSingle = LispType.None | LispType.True | string | Lisp;\nexport type LispItem = LispItemSingle | LispItemSingle[];\nexport type Lisp = [LispType, LispItem, LispItem];\n\nfunction createLisp<L extends Lisp>(obj: {\n  op: ExtractLispOp<L>;\n  a: ExtractLispA<L>;\n  b: ExtractLispB<L>;\n}) {\n  return [obj.op, obj.a, obj.b] as L;\n}\n\nconst NullLisp = createLisp<None>({ op: LispType.None, a: LispType.None, b: LispType.None });\n\nexport type Literal = DefineLisp<LispType.Literal, string, Lisp[]> & { tempJsStrings?: string[] };\nexport type If = DefineLisp<LispType.If, Lisp, IfCase>;\nexport type InlineIf = DefineLisp<LispType.InlineIf, Lisp, InlineIfCase>;\nexport type IfCase = DefineLisp<LispType.IfCase, Lisp[], Lisp[]>;\nexport type InlineIfCase = DefineLisp<LispType.InlineIfCase, Lisp, Lisp>;\nexport type KeyVal = DefineLisp<LispType.KeyVal, string | Lisp, Lisp>;\nexport type SpreadObject = DefineLisp<LispType.SpreadObject, LispType.None, Lisp>;\nexport type SpreadArray = DefineLisp<LispType.SpreadArray, LispType.None, Lisp>;\nexport type ArrayProp = DefineLisp<LispType.ArrayProp, Lisp, Lisp>;\nexport type Prop = DefineLisp<LispType.Prop, Lisp, string | Lisp>;\nexport type PropOptional = DefineLisp<LispType.PropOptional, Lisp, Lisp[]>;\nexport type Call = DefineLisp<LispType.Call, Lisp, Lisp[]>;\nexport type CallOptional = DefineLisp<LispType.CallOptional, Lisp, Lisp[]>;\nexport type CreateArray = DefineLisp<LispType.CreateArray, Lisp, Lisp[]>;\nexport type CreateObject = DefineLisp<LispType.CreateObject, Lisp, Lisp[]>;\nexport type Group = DefineLisp<LispType.Group, Lisp, Lisp[]>;\nexport type Inverse = DefineLisp<LispType.Inverse, Lisp, Lisp>;\nexport type Not = DefineLisp<LispType.Not, Lisp, Lisp>;\nexport type Negative = DefineLisp<LispType.Negative, Lisp, Lisp>;\nexport type Positive = DefineLisp<LispType.Positive, Lisp, Lisp>;\nexport type Typeof = DefineLisp<LispType.Typeof, Lisp, Lisp>;\nexport type Delete = DefineLisp<LispType.Delete, Lisp, Lisp>;\nexport type IncrementBefore = DefineLisp<LispType.IncrementBefore, Lisp, LispType.None>;\nexport type IncrementAfter = DefineLisp<LispType.IncrementAfter, Lisp, LispType.None>;\nexport type DecrementBefore = DefineLisp<LispType.DecrementBefore, Lisp, LispType.None>;\nexport type DecrementAfter = DefineLisp<LispType.DecrementAfter, Lisp, LispType.None>;\n\nexport type And = DefineLisp<LispType.And, Lisp, Lisp>;\nexport type Or = DefineLisp<LispType.Or, Lisp, Lisp>;\nexport type Instanceof = DefineLisp<LispType.Instanceof, Lisp, Lisp>;\nexport type In = DefineLisp<LispType.In, Lisp, Lisp>;\nexport type Assigns = DefineLisp<LispType.Assign, Lisp, Lisp>;\nexport type SubractEquals = DefineLisp<LispType.SubractEquals, Lisp, Lisp>;\nexport type AddEquals = DefineLisp<LispType.AddEquals, Lisp, Lisp>;\nexport type DivideEquals = DefineLisp<LispType.DivideEquals, Lisp, Lisp>;\nexport type PowerEquals = DefineLisp<LispType.PowerEquals, Lisp, Lisp>;\nexport type MultiplyEquals = DefineLisp<LispType.MultiplyEquals, Lisp, Lisp>;\nexport type ModulusEquals = DefineLisp<LispType.ModulusEquals, Lisp, Lisp>;\nexport type BitNegateEquals = DefineLisp<LispType.BitNegateEquals, Lisp, Lisp>;\nexport type BitAndEquals = DefineLisp<LispType.BitAndEquals, Lisp, Lisp>;\nexport type BitOrEquals = DefineLisp<LispType.BitOrEquals, Lisp, Lisp>;\nexport type UnsignedShiftRightEquals = DefineLisp<LispType.UnsignedShiftRightEquals, Lisp, Lisp>;\nexport type ShiftLeftEquals = DefineLisp<LispType.ShiftLeftEquals, Lisp, Lisp>;\nexport type ShiftRightEquals = DefineLisp<LispType.ShiftRightEquals, Lisp, Lisp>;\n\nexport type BitAnd = DefineLisp<LispType.BitAnd, Lisp, Lisp>;\nexport type BitOr = DefineLisp<LispType.BitOr, Lisp, Lisp>;\nexport type BitNegate = DefineLisp<LispType.BitNegate, Lisp, Lisp>;\nexport type BitShiftLeft = DefineLisp<LispType.BitShiftLeft, Lisp, Lisp>;\nexport type BitShiftRight = DefineLisp<LispType.BitShiftRight, Lisp, Lisp>;\nexport type BitUnsignedShiftRight = DefineLisp<LispType.BitUnsignedShiftRight, Lisp, Lisp>;\nexport type SmallerEqualThan = DefineLisp<LispType.SmallerEqualThan, Lisp, Lisp>;\nexport type LargerEqualThan = DefineLisp<LispType.LargerEqualThan, Lisp, Lisp>;\nexport type SmallerThan = DefineLisp<LispType.SmallerThan, Lisp, Lisp>;\nexport type LargerThan = DefineLisp<LispType.LargerThan, Lisp, Lisp>;\nexport type StrictNotEqual = DefineLisp<LispType.StrictNotEqual, Lisp, Lisp>;\nexport type NotEqual = DefineLisp<LispType.NotEqual, Lisp, Lisp>;\nexport type StrictEqual = DefineLisp<LispType.StrictEqual, Lisp, Lisp>;\nexport type Equal = DefineLisp<LispType.Equal, Lisp, Lisp>;\nexport type Plus = DefineLisp<LispType.Plus, Lisp, Lisp>;\nexport type Minus = DefineLisp<LispType.Minus, Lisp, Lisp>;\nexport type Divide = DefineLisp<LispType.Divide, Lisp, Lisp>;\nexport type Power = DefineLisp<LispType.Power, Lisp, Lisp>;\nexport type Multiply = DefineLisp<LispType.Multiply, Lisp, Lisp>;\nexport type Modulus = DefineLisp<LispType.Modulus, Lisp, Lisp>;\n\nexport type Block = DefineLisp<LispType.Block, Lisp[], LispType.None>;\nexport type Expression = DefineLisp<LispType.Expression, Lisp[], LispType.None>;\nexport type Return = DefineLisp<LispType.Return, LispType.None, Lisp>;\nexport type Throw = DefineLisp<LispType.Throw, LispType.None, Lisp>;\nexport type Switch = DefineLisp<LispType.Switch, Lisp, SwitchCase[]>;\nexport type SwitchCase = DefineLisp<LispType.SwitchCase, LispType.None | Lisp, Lisp[]>;\nexport type Var = DefineLisp<LispType.Var, string, Lisp | LispType.None>;\nexport type Let = DefineLisp<LispType.Let, string, Lisp | LispType.None>;\nexport type Const = DefineLisp<LispType.Const, string, Lisp | LispType.None>;\n\nexport type Number = DefineLisp<LispType.Number, LispType.None, string>;\nexport type BigInt = DefineLisp<LispType.BigInt, LispType.None, string>;\nexport type GlobalSymbol = DefineLisp<LispType.GlobalSymbol, LispType.None, string>;\nexport type LiteralIndex = DefineLisp<LispType.LiteralIndex, LispType.None, string>;\nexport type StringIndex = DefineLisp<LispType.StringIndex, LispType.None, string>;\nexport type RegexIndex = DefineLisp<LispType.RegexIndex, LispType.None, string>;\n\nexport type Function = DefineLisp<\n  LispType.Function,\n  (string | LispType.None | LispType.True)[],\n  string | Lisp[]\n>;\nexport type InlineFunction = DefineLisp<LispType.InlineFunction, string[], string | Lisp[]>;\nexport type ArrowFunction = DefineLisp<LispType.ArrowFunction, string[], string | Lisp[]>;\nexport type Loop = DefineLisp<LispType.Loop, LispItem, Lisp[]>;\nexport type LoopAction = DefineLisp<LispType.LoopAction, string, LispType.None>;\nexport type Try = DefineLisp<LispType.Try, Lisp[], LispItem>;\n\nexport type Void = DefineLisp<LispType.Void, Lisp, LispType.None>;\nexport type Await = DefineLisp<LispType.Await, Lisp, LispType.None>;\nexport type New = DefineLisp<LispType.New, Lisp, Lisp[]>;\nexport type None = DefineLisp<LispType.None, LispType.None, LispType.None>;\n\nexport type LispFamily =\n  | Literal\n  | If\n  | InlineIf\n  | IfCase\n  | InlineIfCase\n  | KeyVal\n  | SpreadObject\n  | SpreadArray\n  | ArrayProp\n  | Prop\n  | PropOptional\n  | Call\n  | CallOptional\n  | CreateArray\n  | CreateObject\n  | Group\n  | Inverse\n  | Not\n  | Negative\n  | Positive\n  | Typeof\n  | Delete\n  | IncrementBefore\n  | IncrementAfter\n  | DecrementBefore\n  | DecrementAfter\n  | And\n  | Or\n  | Instanceof\n  | In\n  | Assigns\n  | SubractEquals\n  | AddEquals\n  | DivideEquals\n  | PowerEquals\n  | MultiplyEquals\n  | ModulusEquals\n  | BitNegateEquals\n  | BitAndEquals\n  | BitOrEquals\n  | UnsignedShiftRightEquals\n  | ShiftLeftEquals\n  | ShiftRightEquals\n  | BitAnd\n  | BitOr\n  | BitNegate\n  | BitShiftLeft\n  | BitShiftRight\n  | BitUnsignedShiftRight\n  | SmallerEqualThan\n  | LargerEqualThan\n  | SmallerThan\n  | LargerThan\n  | StrictNotEqual\n  | NotEqual\n  | StrictEqual\n  | Equal\n  | Plus\n  | Minus\n  | Divide\n  | Power\n  | Multiply\n  | Modulus\n  | Block\n  | Expression\n  | Return\n  | Throw\n  | Switch\n  | SwitchCase\n  | Var\n  | Let\n  | Const\n  | Number\n  | BigInt\n  | GlobalSymbol\n  | LiteralIndex\n  | StringIndex\n  | RegexIndex\n  | Function\n  | InlineFunction\n  | ArrowFunction\n  | Loop\n  | LoopAction\n  | Try\n  | Void\n  | Await\n  | New\n  | None;\n\nexport interface IRegEx {\n  regex: string;\n  flags: string;\n  length: number;\n}\n\nexport interface IConstants {\n  strings: string[];\n  literals: Literal[];\n  regexes: IRegEx[];\n  eager: boolean;\n}\n\nexport interface IExecutionTree {\n  tree: Lisp[];\n  constants: IConstants;\n}\n\ntype LispCallback<T> = (\n  strings: IConstants,\n  type: T,\n  part: CodeString,\n  res: string[],\n  expect: string,\n  ctx: { lispTree: Lisp }\n) => any;\nconst lispTypes: Map<string, LispCallback<string>> = new Map();\n\nexport class ParseError extends Error {\n  constructor(message: string, public code: string) {\n    super(message + ': ' + code.substring(0, 40));\n  }\n}\n\nlet lastType: CodeString | string;\nlet lastPart: CodeString | string;\nlet lastLastPart: CodeString | string;\nlet lastLastLastPart: CodeString | string;\nlet lastLastLastLastPart: CodeString | string;\n\nconst inlineIfElse = /^:/;\nconst elseIf = /^else(?![\\w$])/;\nconst ifElse = /^if(?![\\w$])/;\nconst space = /^\\s/;\n\nexport const expectTypes = {\n  splitter: {\n    types: {\n      opHigh: /^(\\/|\\*\\*|\\*(?!\\*)|%)(?!=)/,\n      op: /^(\\+(?!(\\+))|-(?!(-)))(?!=)/,\n      comparitor: /^(<=|>=|<(?!<)|>(?!>)|!==|!=(?!=)|===|==)/,\n      boolOp: /^(&&|\\|\\||instanceof(?![\\w$])|in(?![\\w$]))/,\n      bitwise: /^(&(?!&)|\\|(?!\\|)|\\^|<<|>>(?!>)|>>>)(?!=)/,\n    },\n    next: ['modifier', 'value', 'prop', 'incrementerBefore'],\n  },\n  inlineIf: {\n    types: {\n      inlineIf: /^\\?(?!\\.(?!\\d))/,\n    },\n    next: ['expEnd'],\n  },\n  assignment: {\n    types: {\n      assignModify: /^(-=|\\+=|\\/=|\\*\\*=|\\*=|%=|\\^=|&=|\\|=|>>>=|>>=|<<=)/,\n      assign: /^(=)(?!=)/,\n    },\n    next: ['modifier', 'value', 'prop', 'incrementerBefore'],\n  },\n  incrementerBefore: {\n    types: { incrementerBefore: /^(\\+\\+|--)/ },\n    next: ['prop'],\n  },\n  expEdge: {\n    types: {\n      call: /^(\\?\\.)?[(]/,\n      incrementerAfter: /^(\\+\\+|--)/,\n    },\n    next: ['splitter', 'expEdge', 'dot', 'inlineIf', 'expEnd'],\n  },\n  modifier: {\n    types: {\n      not: /^!/,\n      inverse: /^~/,\n      negative: /^-(?!-)/,\n      positive: /^\\+(?!\\+)/,\n      typeof: /^typeof(?![\\w$])/,\n      delete: /^delete(?![\\w$])/,\n    },\n    next: ['modifier', 'value', 'prop', 'incrementerBefore'],\n  },\n  dot: {\n    types: {\n      arrayProp: /^(\\?\\.)?\\[/,\n      dot: /^(\\?)?\\.(?=\\s*[a-zA-Z$_])/,\n    },\n    next: ['splitter', 'assignment', 'expEdge', 'dot', 'inlineIf', 'expEnd'],\n  },\n  prop: {\n    types: {\n      prop: /^[a-zA-Z$_][a-zA-Z\\d$_]*/,\n    },\n    next: ['splitter', 'assignment', 'expEdge', 'dot', 'inlineIf', 'expEnd'],\n  },\n  value: {\n    types: {\n      createObject: /^\\{/,\n      createArray: /^\\[/,\n      number:\n        /^(0x[\\da-f]+(_[\\da-f]+)*|(\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?|\\.\\d+(_\\d+)*))(e[+-]?\\d+(_\\d+)*)?(n)?(?!\\d)/i,\n      string: /^\"(\\d+)\"/,\n      literal: /^`(\\d+)`/,\n      regex: /^\\/(\\d+)\\/r(?![\\w$])/,\n      boolean: /^(true|false)(?![\\w$])/,\n      null: /^null(?![\\w$])/,\n      und: /^undefined(?![\\w$])/,\n      arrowFunctionSingle: /^(async\\s+)?([a-zA-Z$_][a-zA-Z\\d$_]*)\\s*=>\\s*({)?/,\n      arrowFunction:\n        /^(async\\s*)?\\(\\s*((\\.\\.\\.)?\\s*[a-zA-Z$_][a-zA-Z\\d$_]*(\\s*,\\s*(\\.\\.\\.)?\\s*[a-zA-Z$_][a-zA-Z\\d$_]*)*)?\\s*\\)\\s*=>\\s*({)?/,\n      inlineFunction:\n        /^(async\\s+)?function(\\s*[a-zA-Z$_][a-zA-Z\\d$_]*)?\\s*\\(\\s*((\\.\\.\\.)?\\s*[a-zA-Z$_][a-zA-Z\\d$_]*(\\s*,\\s*(\\.\\.\\.)?\\s*[a-zA-Z$_][a-zA-Z\\d$_]*)*)?\\s*\\)\\s*{/,\n      group: /^\\(/,\n      NaN: /^NaN(?![\\w$])/,\n      Infinity: /^Infinity(?![\\w$])/,\n      void: /^void(?![\\w$])\\s*/,\n      await: /^await(?![\\w$])\\s*/,\n      new: /^new(?![\\w$])\\s*/,\n    },\n    next: ['splitter', 'expEdge', 'dot', 'inlineIf', 'expEnd'],\n  },\n  initialize: {\n    types: {\n      initialize: /^(var|let|const)\\s+([a-zA-Z$_][a-zA-Z\\d$_]*)\\s*(=)?/,\n      return: /^return(?![\\w$])/,\n      throw: /^throw(?![\\w$])\\s*/,\n    },\n    next: ['modifier', 'value', 'prop', 'incrementerBefore', 'expEnd'],\n  },\n  spreadObject: {\n    types: {\n      spreadObject: /^\\.\\.\\./,\n    },\n    next: ['value', 'prop'],\n  },\n  spreadArray: {\n    types: {\n      spreadArray: /^\\.\\.\\./,\n    },\n    next: ['value', 'prop'],\n  },\n  expEnd: { types: {}, next: [] },\n  expFunction: {\n    types: {\n      function:\n        /^(async\\s+)?function(\\s*[a-zA-Z$_][a-zA-Z\\d$_]*)\\s*\\(\\s*((\\.\\.\\.)?\\s*[a-zA-Z$_][a-zA-Z\\d$_]*(\\s*,\\s*(\\.\\.\\.)?\\s*[a-zA-Z$_][a-zA-Z\\d$_]*)*)?\\s*\\)\\s*{/,\n    },\n    next: ['expEdge', 'expEnd'],\n  },\n  expSingle: {\n    types: {\n      for: /^(([a-zA-Z$_][\\w$]*)\\s*:)?\\s*for\\s*\\(/,\n      do: /^(([a-zA-Z$_][\\w$]*)\\s*:)?\\s*do(?![\\w$])\\s*(\\{)?/,\n      while: /^(([a-zA-Z$_][\\w$]*)\\s*:)?\\s*while\\s*\\(/,\n      loopAction: /^(break|continue)(?![\\w$])\\s*([a-zA-Z$_][\\w$]*)?/,\n      if: /^((([a-zA-Z$_][\\w$]*)\\s*:)?\\s*)if\\s*\\(/,\n      try: /^try\\s*{/,\n      block: /^{/,\n      switch: /^(([a-zA-Z$_][\\w$]*)\\s*:)?\\s*switch\\s*\\(/,\n    },\n    next: ['expEnd'],\n  },\n} as Record<string, { types: Record<string, RegExp>; next: string[] }>;\n\nconst closings = {\n  '(': ')',\n  '[': ']',\n  '{': '}',\n  \"'\": \"'\",\n  '\"': '\"',\n  '`': '`',\n} as Record<string, string>;\n\nexport function testMultiple(str: string, tests: RegExp[]) {\n  let found: RegExpExecArray | null = null;\n  for (let i = 0; i < tests.length; i++) {\n    const test = tests[i];\n    found = test.exec(str);\n    if (found) break;\n  }\n  return found;\n}\n\nconst emptyString = new CodeString('');\n\nconst okFirstChars = /^[+\\-~ !]/;\nconst aNumber = expectTypes.value.types.number;\nconst wordReg = /^((if|for|else|while|do|function)(?![\\w$])|[\\w$]+)/;\nconst semiColon = /^;/;\nconst insertedSemicolons: WeakMap<{ str: string }, Array<number>> = new WeakMap();\nconst quoteCache: WeakMap<{ str: string }, Map<number, number>> = new WeakMap();\nexport interface restDetails {\n  oneliner?: boolean;\n  words?: string[];\n  lastWord?: string;\n  lastAnyWord?: string;\n  regRes?: RegExpExecArray;\n}\nexport function restOfExp(\n  constants: IConstants,\n  part: CodeString,\n  tests?: RegExp[],\n  quote?: string,\n  firstOpening?: string,\n  closingsTests?: RegExp[],\n  details: restDetails = {}\n): CodeString {\n  if (!part.length) {\n    return part;\n  }\n  details.words = details.words || [];\n  let isStart = true;\n  tests = tests || [];\n  const hasSemiTest = tests.includes(semiColon);\n  if (hasSemiTest) {\n    tests = tests.filter((a) => a !== semiColon);\n  }\n  const insertedSemis = insertedSemicolons.get(part.ref) || [];\n  const cache = quoteCache.get(part.ref) || new Map<number, number>();\n  quoteCache.set(part.ref, cache);\n  if (quote && cache.has(part.start - 1)) {\n    return part.substring(0, cache.get(part.start - 1)! - part.start);\n  }\n  let escape = false;\n  let done = false;\n  let lastChar = '';\n  let isOneLiner = false;\n  let i;\n  let lastInertedSemi = false;\n  for (i = 0; i < part.length && !done; i++) {\n    let char = part.char(i)!;\n    if (quote === '\"' || quote === \"'\" || quote === '`') {\n      if (quote === '`' && char === '$' && part.char(i + 1) === '{' && !escape) {\n        const skip = restOfExp(constants, part.substring(i + 2), [], '{');\n        i += skip.length + 2;\n      } else if (char === quote && !escape) {\n        return part.substring(0, i);\n      }\n      escape = !escape && char === '\\\\';\n    } else if (closings[char]) {\n      if (!lastInertedSemi && insertedSemis[i + part.start]) {\n        lastInertedSemi = true;\n        if (hasSemiTest) {\n          break;\n        }\n        i--;\n        lastChar = ';';\n        continue;\n      }\n      if (isOneLiner && char === '{') {\n        isOneLiner = false;\n      }\n      if (char === firstOpening) {\n        done = true;\n        break;\n      } else {\n        const skip = restOfExp(constants, part.substring(i + 1), [], char);\n        cache.set(skip.start - 1, skip.end);\n        i += skip.length + 1;\n        isStart = false;\n        if (closingsTests) {\n          const sub = part.substring(i);\n          let found: RegExpExecArray | null;\n          if ((found = testMultiple(sub.toString(), closingsTests))) {\n            details.regRes = found;\n            done = true;\n          }\n        }\n      }\n    } else if (!quote) {\n      let sub = part.substring(i).toString();\n      let foundWord: RegExpExecArray | null;\n      let foundNumber: RegExpExecArray | null;\n      if (closingsTests) {\n        let found: RegExpExecArray | null;\n        if ((found = testMultiple(sub, closingsTests))) {\n          details.regRes = found;\n          i++;\n          done = true;\n          break;\n        }\n      }\n      if ((foundNumber = aNumber.exec(sub))) {\n        i += foundNumber[0].length - 1;\n        sub = part.substring(i).toString();\n      } else if (lastChar != char) {\n        let found: [string] | RegExpExecArray | null = null;\n        if (char === ';' || (insertedSemis[i + part.start] && !isStart && !lastInertedSemi)) {\n          if (hasSemiTest) {\n            found = [';'];\n          } else if (insertedSemis[i + part.start]) {\n            lastInertedSemi = true;\n            i--;\n            lastChar = ';';\n            continue;\n          }\n          char = sub = ';';\n        } else {\n          lastInertedSemi = false;\n        }\n        if (!found) {\n          found = testMultiple(sub, tests);\n        }\n        if (found) {\n          done = true;\n        }\n        if (!done && (foundWord = wordReg.exec(sub))) {\n          isOneLiner = true;\n          if (foundWord[0].length > 1) {\n            details.words.push(foundWord[1]);\n            details.lastAnyWord = foundWord[1];\n            if (foundWord[2]) {\n              details.lastWord = foundWord[2];\n            }\n          }\n          if (foundWord[0].length > 2) {\n            i += foundWord[0].length - 2;\n          }\n        }\n      }\n      if (isStart) {\n        if (okFirstChars.test(sub)) {\n          done = false;\n        } else {\n          isStart = false;\n        }\n      }\n      if (done) break;\n    } else if (char === closings[quote]) {\n      return part.substring(0, i);\n    }\n    lastChar = char;\n  }\n  if (quote) {\n    throw new SyntaxError(\"Unclosed '\" + quote + \"'\");\n  }\n  if (details) {\n    details.oneliner = isOneLiner;\n  }\n  return part.substring(0, i);\n}\nrestOfExp.next = ['splitter', 'expEnd', 'inlineIf'];\n\nconst startingExecpted = [\n  'initialize',\n  'expSingle',\n  'expFunction',\n  'value',\n  'modifier',\n  'prop',\n  'incrementerBefore',\n  'expEnd',\n];\n\nexport const setLispType = <T extends readonly string[]>(types: T, fn: LispCallback<T[number]>) => {\n  types.forEach((type) => {\n    lispTypes.set(type, fn);\n  });\n};\n\nconst closingsCreate: { [type: string]: RegExp } = {\n  createArray: /^\\]/,\n  createObject: /^\\}/,\n  group: /^\\)/,\n  arrayProp: /^\\]/,\n  call: /^\\)/,\n};\n\nconst typesCreate = {\n  createArray: LispType.CreateArray,\n  createObject: LispType.CreateObject,\n  group: LispType.Group,\n  arrayProp: LispType.ArrayProp,\n  call: LispType.Call,\n  prop: LispType.Prop,\n  '?prop': LispType.PropOptional,\n  '?call': LispType.CallOptional,\n} as any;\n\nsetLispType(\n  ['createArray', 'createObject', 'group', 'arrayProp', 'call'] as const,\n  (constants, type, part, res, expect, ctx) => {\n    let extract = emptyString;\n    const arg: CodeString[] = [];\n    let end = false;\n    let i = res[0].length;\n    const start = i;\n    while (i < part.length && !end) {\n      extract = restOfExp(constants, part.substring(i), [closingsCreate[type], /^,/]);\n      i += extract.length;\n      if (extract.trim().length) {\n        arg.push(extract);\n      }\n      if (part.char(i) !== ',') {\n        end = true;\n      } else {\n        i++;\n      }\n    }\n    const next = ['value', 'modifier', 'prop', 'incrementerBefore', 'expEnd'];\n    let l: Lisp | Lisp[];\n\n    let funcFound: RegExpExecArray | null;\n    switch (type) {\n      case 'group':\n      case 'arrayProp':\n        l = lispifyExpr(constants, part.substring(start, i));\n        break;\n      case 'call':\n      case 'createArray':\n        // @TODO: support 'empty' values\n        l = arg.map((e) => lispify(constants, e, [...next, 'spreadArray']));\n        break;\n      case 'createObject':\n        l = arg.map((str) => {\n          str = str.trimStart();\n          let value: Lisp;\n          let key: string | Lisp = '';\n          funcFound = expectTypes.expFunction.types.function.exec('function ' + str);\n          if (funcFound) {\n            key = funcFound[2].trimStart();\n            value = lispify(\n              constants,\n              new CodeString('function ' + str.toString().replace(key, ''))\n            );\n          } else {\n            const extract = restOfExp(constants, str, [/^:/]);\n            key = lispify(constants, extract, [...next, 'spreadObject']) as Prop;\n            if (key[0] === LispType.Prop) {\n              key = (key as Prop)[2];\n            }\n            value = lispify(constants, str.substring(extract.length + 1));\n          }\n          return createLisp<KeyVal>({\n            op: LispType.KeyVal,\n            a: key,\n            b: value,\n          });\n        });\n        break;\n    }\n    const lisptype = (\n      type === 'arrayProp'\n        ? res[1]\n          ? LispType.PropOptional\n          : LispType.Prop\n        : type === 'call'\n        ? res[1]\n          ? LispType.CallOptional\n          : LispType.Call\n        : typesCreate[type]\n    ) as (typeof typesCreate)[keyof typeof typesCreate];\n    ctx.lispTree = lispify(\n      constants,\n      part.substring(i + 1),\n      expectTypes[expect].next,\n      createLisp<\n        ArrayProp | Prop | Call | CreateObject | CreateArray | Group | PropOptional | CallOptional\n      >({\n        op: lisptype,\n        a: ctx.lispTree,\n        b: l,\n      })\n    );\n  }\n);\n\nconst modifierTypes = {\n  inverse: LispType.Inverse,\n  not: LispType.Not,\n  positive: LispType.Positive,\n  negative: LispType.Negative,\n  typeof: LispType.Typeof,\n  delete: LispType.Delete,\n} as const;\n\nsetLispType(\n  ['inverse', 'not', 'negative', 'positive', 'typeof', 'delete'] as const,\n  (constants, type, part, res, expect, ctx) => {\n    const extract = restOfExp(constants, part.substring(res[0].length), [/^([^\\s.?\\w$]|\\?[^.])/]);\n    ctx.lispTree = lispify(\n      constants,\n      part.substring(extract.length + res[0].length),\n      restOfExp.next,\n      createLisp<Inverse | Not | Negative | Positive | Typeof | Delete>({\n        op: modifierTypes[type],\n        a: ctx.lispTree,\n        b: lispify(constants, extract, expectTypes[expect].next),\n      })\n    );\n  }\n);\n\nconst incrementTypes = {\n  '++$': LispType.IncrementBefore,\n  '--$': LispType.DecrementBefore,\n  '$++': LispType.IncrementAfter,\n  '$--': LispType.DecrementAfter,\n} as any;\n\nsetLispType(['incrementerBefore'] as const, (constants, type, part, res, expect, ctx) => {\n  const extract = restOfExp(constants, part.substring(2), [/^[^\\s.\\w$]/]);\n  ctx.lispTree = lispify(\n    constants,\n    part.substring(extract.length + 2),\n    restOfExp.next,\n    createLisp<IncrementBefore | DecrementBefore>({\n      op: incrementTypes[res[0] + '$'],\n      a: lispify(constants, extract, expectTypes[expect].next),\n      b: LispType.None,\n    })\n  );\n});\n\nsetLispType(['incrementerAfter'] as const, (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = lispify(\n    constants,\n    part.substring(res[0].length),\n    expectTypes[expect].next,\n    createLisp<IncrementAfter | DecrementAfter>({\n      op: incrementTypes['$' + res[0]],\n      a: ctx.lispTree,\n      b: LispType.None,\n    })\n  );\n});\n\nconst adderTypes = {\n  '&&': LispType.And,\n  '||': LispType.Or,\n  instanceof: LispType.Instanceof,\n  in: LispType.In,\n  '=': LispType.Assign,\n  '-=': LispType.SubractEquals,\n  '+=': LispType.AddEquals,\n  '/=': LispType.DivideEquals,\n  '**=': LispType.PowerEquals,\n  '*=': LispType.MultiplyEquals,\n  '%=': LispType.ModulusEquals,\n  '^=': LispType.BitNegateEquals,\n  '&=': LispType.BitAndEquals,\n  '|=': LispType.BitOrEquals,\n  '>>>=': LispType.UnsignedShiftRightEquals,\n  '<<=': LispType.ShiftLeftEquals,\n  '>>=': LispType.ShiftRightEquals,\n} as any;\n\nsetLispType(\n  ['assign', 'assignModify', 'boolOp'] as const,\n  (constants, type, part, res, expect, ctx) => {\n    ctx.lispTree = createLisp<\n      | And\n      | Or\n      | Instanceof\n      | In\n      | Assigns\n      | SubractEquals\n      | AddEquals\n      | DivideEquals\n      | PowerEquals\n      | MultiplyEquals\n      | ModulusEquals\n      | BitNegateEquals\n      | BitAndEquals\n      | BitOrEquals\n      | UnsignedShiftRightEquals\n      | ShiftLeftEquals\n      | ShiftRightEquals\n    >({\n      op: adderTypes[res[0]],\n      a: ctx.lispTree,\n      b: lispify(constants, part.substring(res[0].length), expectTypes[expect].next),\n    });\n  }\n);\n\nconst opTypes = {\n  '&': LispType.BitAnd,\n  '|': LispType.BitOr,\n  '^': LispType.BitNegate,\n  '<<': LispType.BitShiftLeft,\n  '>>': LispType.BitShiftRight,\n  '>>>': LispType.BitUnsignedShiftRight,\n  '<=': LispType.SmallerEqualThan,\n  '>=': LispType.LargerEqualThan,\n  '<': LispType.SmallerThan,\n  '>': LispType.LargerThan,\n  '!==': LispType.StrictNotEqual,\n  '!=': LispType.NotEqual,\n  '===': LispType.StrictEqual,\n  '==': LispType.Equal,\n  '+': LispType.Plus,\n  '-': LispType.Minus,\n  '/': LispType.Divide,\n  '**': LispType.Power,\n  '*': LispType.Multiply,\n  '%': LispType.Modulus,\n} as any;\n\nsetLispType(\n  ['opHigh', 'op', 'comparitor', 'bitwise'] as const,\n  (constants, type, part, res, expect, ctx) => {\n    const next = [expectTypes.inlineIf.types.inlineIf, inlineIfElse];\n    switch (type) {\n      case 'opHigh':\n        next.push(expectTypes.splitter.types.opHigh);\n      case 'op':\n        next.push(expectTypes.splitter.types.op);\n      case 'comparitor':\n        next.push(expectTypes.splitter.types.comparitor);\n      case 'bitwise':\n        next.push(expectTypes.splitter.types.bitwise);\n        next.push(expectTypes.splitter.types.boolOp);\n    }\n    const extract = restOfExp(constants, part.substring(res[0].length), next);\n    ctx.lispTree = lispify(\n      constants,\n      part.substring(extract.length + res[0].length),\n      restOfExp.next,\n      createLisp<\n        | BitAnd\n        | BitOr\n        | BitNegate\n        | BitShiftLeft\n        | BitShiftRight\n        | BitUnsignedShiftRight\n        | SmallerEqualThan\n        | LargerEqualThan\n        | SmallerThan\n        | LargerThan\n        | StrictNotEqual\n        | NotEqual\n        | StrictEqual\n        | Equal\n        | Plus\n        | Minus\n        | Divide\n        | Power\n        | Multiply\n        | Modulus\n      >({\n        op: opTypes[res[0]],\n        a: ctx.lispTree,\n        b: lispify(constants, extract, expectTypes[expect].next),\n      })\n    );\n  }\n);\n\nsetLispType(['inlineIf'] as const, (constants, type, part, res, expect, ctx) => {\n  let found = false;\n  const extract = part.substring(0, 0);\n  let quoteCount = 1;\n  while (!found && extract.length < part.length) {\n    extract.end = restOfExp(constants, part.substring(extract.length + 1), [\n      expectTypes.inlineIf.types.inlineIf,\n      inlineIfElse,\n    ]).end;\n    if (part.char(extract.length) === '?') {\n      quoteCount++;\n    } else {\n      quoteCount--;\n    }\n    if (!quoteCount) {\n      found = true;\n    }\n  }\n  extract.start = part.start + 1;\n  ctx.lispTree = createLisp<InlineIf>({\n    op: LispType.InlineIf,\n    a: ctx.lispTree,\n    b: createLisp<InlineIfCase>({\n      op: LispType.InlineIfCase,\n      a: lispifyExpr(constants, extract),\n      b: lispifyExpr(constants, part.substring(res[0].length + extract.length + 1)),\n    }),\n  });\n});\n\nfunction extractIfElse(constants: IConstants, part: CodeString) {\n  let count = 0;\n  let found = part.substring(0, 0);\n  let foundElse = emptyString;\n  let foundTrue: CodeString | undefined;\n  let first = true;\n  let elseReg: RegExpExecArray | null;\n  let details: restDetails = {};\n  while (\n    (found = restOfExp(\n      constants,\n      part.substring(found.end - part.start),\n      [elseIf, ifElse, semiColon],\n      undefined,\n      undefined,\n      undefined,\n      details\n    )).length ||\n    first\n  ) {\n    first = false;\n    const f = part.substring(found.end - part.start).toString();\n\n    if (f.startsWith('if')) {\n      found.end++;\n      count++;\n    } else if (f.startsWith('else')) {\n      foundTrue = part.substring(0, found.end - part.start);\n      found.end++;\n      count--;\n      if (!count) {\n        found.end--;\n      }\n    } else if ((elseReg = /^;?\\s*else(?![\\w$])/.exec(f))) {\n      foundTrue = part.substring(0, found.end - part.start);\n      found.end += elseReg[0].length - 1;\n      count--;\n      if (!count) {\n        found.end -= elseReg[0].length - 1;\n      }\n    } else {\n      foundTrue = foundElse.length ? foundTrue : part.substring(0, found.end - part.start);\n      break;\n    }\n    if (!count) {\n      const ie = extractIfElse(\n        constants,\n        part.substring(found.end - part.start + (/^;?\\s*else(?![\\w$])/.exec(f)?.[0].length || 0))\n      );\n      foundElse = ie.all;\n      break;\n    }\n    details = {};\n  }\n  foundTrue = foundTrue || part.substring(0, found.end - part.start);\n  return {\n    all: part.substring(0, Math.max(foundTrue.end, foundElse.end) - part.start),\n    true: foundTrue,\n    false: foundElse,\n  };\n}\n\nsetLispType(['if'] as const, (constants, type, part, res, expect, ctx) => {\n  let condition = restOfExp(constants, part.substring(res[0].length), [], '(');\n  const ie = extractIfElse(constants, part.substring(res[1].length));\n  const startTrue = res[0].length - res[1].length + condition.length + 1;\n\n  let trueBlock = ie.true.substring(startTrue);\n  let elseBlock = ie.false;\n\n  condition = condition.trim();\n  trueBlock = trueBlock.trim();\n  elseBlock = elseBlock.trim();\n\n  if (trueBlock.char(0) === '{') trueBlock = trueBlock.slice(1, -1);\n  if (elseBlock.char(0) === '{') elseBlock = elseBlock.slice(1, -1);\n  ctx.lispTree = createLisp<If>({\n    op: LispType.If,\n    a: lispifyExpr(constants, condition),\n    b: createLisp<IfCase>({\n      op: LispType.IfCase,\n      a: lispifyBlock(trueBlock, constants),\n      b: lispifyBlock(elseBlock, constants),\n    }),\n  });\n});\n\nsetLispType(['switch'] as const, (constants, type, part, res, expect, ctx) => {\n  const test = restOfExp(constants, part.substring(res[0].length), [], '(');\n  let start = part.toString().indexOf('{', res[0].length + test.length + 1);\n  if (start === -1) throw new SyntaxError('Invalid switch');\n  let statement = insertSemicolons(\n    constants,\n    restOfExp(constants, part.substring(start + 1), [], '{')\n  );\n  let caseFound: RegExpExecArray | null;\n  const caseTest = /^\\s*(case\\s|default)\\s*/;\n  const cases: SwitchCase[] = [];\n  let defaultFound = false;\n  while ((caseFound = caseTest.exec(statement.toString()))) {\n    if (caseFound[1] === 'default') {\n      if (defaultFound) throw new SyntaxError('Only one default switch case allowed');\n      defaultFound = true;\n    }\n    const cond = restOfExp(constants, statement.substring(caseFound[0].length), [/^:/]);\n    let found = emptyString;\n    let i = (start = caseFound[0].length + cond.length + 1);\n    const bracketFound = /^\\s*\\{/.exec(statement.substring(i).toString());\n    let exprs: Lisp[] = [];\n    if (bracketFound) {\n      i += bracketFound[0].length;\n      found = restOfExp(constants, statement.substring(i), [], '{');\n      i += found.length + 1;\n      exprs = lispifyBlock(found, constants);\n    } else {\n      const notEmpty = restOfExp(constants, statement.substring(i), [caseTest]);\n      if (!notEmpty.trim().length) {\n        exprs = [];\n        i += notEmpty.length;\n      } else {\n        while ((found = restOfExp(constants, statement.substring(i), [semiColon])).length) {\n          i += found.length + (statement.char(i + found.length) === ';' ? 1 : 0);\n          if (caseTest.test(statement.substring(i).toString())) {\n            break;\n          }\n        }\n        exprs = lispifyBlock(statement.substring(start, found.end - statement.start), constants);\n      }\n    }\n    statement = statement.substring(i);\n    cases.push(\n      createLisp<SwitchCase>({\n        op: LispType.SwitchCase,\n        a: caseFound[1] === 'default' ? LispType.None : lispifyExpr(constants, cond),\n        b: exprs,\n      })\n    );\n  }\n  ctx.lispTree = createLisp<Switch>({\n    op: LispType.Switch,\n    a: lispifyExpr(constants, test),\n    b: cases,\n  });\n});\n\nsetLispType(['dot', 'prop'] as const, (constants, type, part, res, expect, ctx) => {\n  let prop = res[0];\n  let index = res[0].length;\n  let op = 'prop';\n  if (type === 'dot') {\n    if (res[1]) {\n      op = '?prop';\n    }\n    const matches = part.substring(res[0].length).toString().match(expectTypes.prop.types.prop);\n    if (matches && matches.length) {\n      prop = matches[0];\n      index = prop.length + res[0].length;\n    } else {\n      throw new SyntaxError('Hanging  dot');\n    }\n  }\n  ctx.lispTree = lispify(\n    constants,\n    part.substring(index),\n    expectTypes[expect].next,\n    createLisp<Prop | PropOptional>({\n      op: typesCreate[op],\n      a: ctx.lispTree,\n      b: prop,\n    })\n  );\n});\n\nsetLispType(['spreadArray', 'spreadObject'] as const, (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = createLisp<SpreadArray | SpreadObject>({\n    op: type === 'spreadArray' ? LispType.SpreadArray : LispType.SpreadObject,\n    a: LispType.None,\n    b: lispify(constants, part.substring(res[0].length), expectTypes[expect].next),\n  });\n});\n\nsetLispType(['return', 'throw'] as const, (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = createLisp<Return | Throw>({\n    op: type === 'return' ? LispType.Return : LispType.Throw,\n    a: LispType.None,\n    b: lispifyExpr(constants, part.substring(res[0].length)),\n  });\n});\n\nsetLispType(\n  ['number', 'boolean', 'null', 'und', 'NaN', 'Infinity'] as const,\n  (constants, type, part, res, expect, ctx) => {\n    ctx.lispTree = lispify(\n      constants,\n      part.substring(res[0].length),\n      expectTypes[expect].next,\n      createLisp<Number | BigInt | GlobalSymbol>({\n        op:\n          type === 'number' ? (res[10] ? LispType.BigInt : LispType.Number) : LispType.GlobalSymbol,\n        a: LispType.None,\n        b: res[10] ? res[1] : res[0],\n      })\n    );\n  }\n);\n\nsetLispType(['string', 'literal', 'regex'] as const, (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = lispify(\n    constants,\n    part.substring(res[0].length),\n    expectTypes[expect].next,\n    createLisp<StringIndex | LiteralIndex | RegexIndex>({\n      op:\n        type === 'string'\n          ? LispType.StringIndex\n          : type === 'literal'\n          ? LispType.LiteralIndex\n          : LispType.RegexIndex,\n      a: LispType.None,\n      b: res[1],\n    })\n  );\n});\n\nsetLispType(['initialize'] as const, (constants, type, part, res, expect, ctx) => {\n  const lt = res[1] === 'var' ? LispType.Var : res[1] === 'let' ? LispType.Let : LispType.Const;\n  if (!res[3]) {\n    ctx.lispTree = lispify(\n      constants,\n      part.substring(res[0].length),\n      expectTypes[expect].next,\n      createLisp<Var | Let | Const>({\n        op: lt,\n        a: res[2],\n        b: LispType.None,\n      })\n    );\n  } else {\n    ctx.lispTree = createLisp<Var | Let | Const>({\n      op: lt,\n      a: res[2],\n      b: lispify(constants, part.substring(res[0].length), expectTypes[expect].next),\n    });\n  }\n});\n\nsetLispType(\n  ['function', 'inlineFunction', 'arrowFunction', 'arrowFunctionSingle'] as const,\n  (constants, type, part, res, expect, ctx) => {\n    const isArrow = type !== 'function' && type !== 'inlineFunction';\n    const isReturn = isArrow && !res[res.length - 1];\n    const argPos = isArrow ? 2 : 3;\n    const isAsync = res[1] ? LispType.True : LispType.None;\n    const args: string[] = res[argPos] ? res[argPos].replace(/\\s+/g, '').split(/,/g) : [];\n    if (!isArrow) {\n      args.unshift((res[2] || '').trimStart());\n    }\n    let ended = false;\n    args.forEach((arg: string) => {\n      if (ended) throw new SyntaxError('Rest parameter must be last formal parameter');\n      if (arg.startsWith('...')) ended = true;\n    });\n    const f = restOfExp(\n      constants,\n      part.substring(res[0].length),\n      !isReturn ? [/^}/] : [/^[,)}\\]]/, semiColon]\n    );\n    const func = isReturn ? 'return ' + f : f.toString();\n    ctx.lispTree = lispify(\n      constants,\n      part.substring(res[0].length + func.length + 1),\n      expectTypes[expect].next,\n      createLisp<Function | InlineFunction | ArrowFunction>({\n        op: isArrow\n          ? LispType.ArrowFunction\n          : type === 'function'\n          ? LispType.Function\n          : LispType.InlineFunction,\n        a: [isAsync, ...args],\n        b: constants.eager ? lispifyFunction(new CodeString(func), constants) : func,\n      })\n    );\n  }\n);\n\nconst iteratorRegex = /^((let|var|const)\\s+)?\\s*([a-zA-Z$_][a-zA-Z\\d$_]*)\\s+(in|of)(?![\\w$])/;\nsetLispType(['for', 'do', 'while'] as const, (constants, type, part, res, expect, ctx) => {\n  let i = 0;\n  let startStep: LispItem = LispType.True;\n  let startInternal: Lisp[] = [];\n  let getIterator: Lisp | LispType.None = LispType.None;\n  let beforeStep: LispItem = LispType.None;\n  let checkFirst = LispType.True;\n  let condition: LispItem;\n  let step: LispItem = LispType.True;\n  let body: CodeString;\n  switch (type) {\n    case 'while': {\n      i = part.toString().indexOf('(') + 1;\n      const extract = restOfExp(constants, part.substring(i), [], '(');\n      condition = lispifyReturnExpr(constants, extract);\n      body = restOfExp(constants, part.substring(i + extract.length + 1)).trim();\n      if (body.char(0) === '{') body = body.slice(1, -1);\n      break;\n    }\n    case 'for': {\n      i = part.toString().indexOf('(') + 1;\n      const args: CodeString[] = [];\n      let extract2 = emptyString;\n      for (let k = 0; k < 3; k++) {\n        extract2 = restOfExp(constants, part.substring(i), [/^[;)]/]);\n        args.push(extract2.trim());\n        i += extract2.length + 1;\n        if (part.char(i - 1) === ')') break;\n      }\n      let iterator: RegExpExecArray | null;\n      if (args.length === 1 && (iterator = iteratorRegex.exec(args[0].toString()))) {\n        if (iterator[4] === 'of') {\n          (getIterator = lispifyReturnExpr(constants, args[0].substring(iterator[0].length))),\n            (startInternal = [ofStart2, ofStart3]);\n          condition = ofCondition;\n          step = ofStep;\n          beforeStep = lispify(\n            constants,\n            new CodeString((iterator[1] || 'let ') + iterator[3] + ' = $$next.value'),\n            ['initialize']\n          );\n        } else {\n          (getIterator = lispifyReturnExpr(constants, args[0].substring(iterator[0].length))),\n            (startInternal = [inStart2, inStart3]);\n          step = inStep;\n          condition = inCondition;\n          beforeStep = lispify(\n            constants,\n            new CodeString((iterator[1] || 'let ') + iterator[3] + ' = $$keys[$$keyIndex]'),\n            ['initialize']\n          );\n        }\n      } else if (args.length === 3) {\n        startStep = lispifyExpr(constants, args.shift()!, startingExecpted);\n        condition = lispifyReturnExpr(constants, args.shift()!);\n        step = lispifyExpr(constants, args.shift()!);\n      } else {\n        throw new SyntaxError('Invalid for loop definition');\n      }\n      body = restOfExp(constants, part.substring(i)).trim();\n      if (body.char(0) === '{') body = body.slice(1, -1);\n\n      break;\n    }\n    case 'do': {\n      checkFirst = LispType.None;\n      const isBlock = !!res[3];\n      body = restOfExp(constants, part.substring(res[0].length), isBlock ? [/^\\}/] : [semiColon]);\n      condition = lispifyReturnExpr(\n        constants,\n        restOfExp(\n          constants,\n          part.substring(part.toString().indexOf('(', res[0].length + body.length) + 1),\n          [],\n          '('\n        )\n      );\n      break;\n    }\n  }\n  const a = [\n    checkFirst,\n    startInternal,\n    getIterator,\n    startStep,\n    step,\n    condition,\n    beforeStep,\n  ] as LispItem;\n  ctx.lispTree = createLisp<Loop>({\n    op: LispType.Loop,\n    a,\n    b: lispifyBlock(body, constants),\n  });\n});\n\nsetLispType(['block'] as const, (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = createLisp<Block>({\n    op: LispType.Block,\n    a: lispifyBlock(restOfExp(constants, part.substring(1), [], '{'), constants),\n    b: LispType.None,\n  });\n});\n\nsetLispType(['loopAction'] as const, (constants, type, part, res, expect, ctx) => {\n  ctx.lispTree = createLisp<LoopAction>({\n    op: LispType.LoopAction,\n    a: res[1],\n    b: LispType.None,\n  });\n});\n\nconst catchReg = /^\\s*(catch\\s*(\\(\\s*([a-zA-Z$_][a-zA-Z\\d$_]*)\\s*\\))?|finally)\\s*\\{/;\nsetLispType(['try'] as const, (constants, type, part, res, expect, ctx) => {\n  const body = restOfExp(constants, part.substring(res[0].length), [], '{');\n  let catchRes = catchReg.exec(part.substring(res[0].length + body.length + 1).toString());\n  let finallyBody;\n  let exception = '';\n  let catchBody;\n  let offset = 0;\n  if (catchRes![1].startsWith('catch')) {\n    catchRes = catchReg.exec(part.substring(res[0].length + body.length + 1).toString());\n    exception = catchRes![2];\n    catchBody = restOfExp(\n      constants,\n      part.substring(res[0].length + body.length + 1 + catchRes![0].length),\n      [],\n      '{'\n    );\n    offset = res[0].length + body.length + 1 + catchRes![0].length + catchBody.length + 1;\n    if (\n      (catchRes = catchReg.exec(part.substring(offset).toString())) &&\n      catchRes[1].startsWith('finally')\n    ) {\n      finallyBody = restOfExp(constants, part.substring(offset + catchRes[0].length), [], '{');\n    }\n  } else {\n    finallyBody = restOfExp(\n      constants,\n      part.substring(res[0].length + body.length + 1 + catchRes![0].length),\n      [],\n      '{'\n    );\n  }\n  const b = [\n    exception,\n    lispifyBlock(insertSemicolons(constants, catchBody || emptyString), constants),\n    lispifyBlock(insertSemicolons(constants, finallyBody || emptyString), constants),\n  ] as LispItem;\n  ctx.lispTree = createLisp<Try>({\n    op: LispType.Try,\n    a: lispifyBlock(insertSemicolons(constants, body), constants),\n    b,\n  });\n});\n\nsetLispType(['void', 'await'] as const, (constants, type, part, res, expect, ctx) => {\n  const extract = restOfExp(constants, part.substring(res[0].length), [/^([^\\s.?\\w$]|\\?[^.])/]);\n  ctx.lispTree = lispify(\n    constants,\n    part.substring(res[0].length + extract.length),\n    expectTypes[expect].next,\n    createLisp<Void | Await>({\n      op: type === 'void' ? LispType.Void : LispType.Await,\n      a: lispify(constants, extract),\n      b: LispType.None,\n    })\n  );\n});\n\nsetLispType(['new'] as const, (constants, type, part, res, expect, ctx) => {\n  let i = res[0].length;\n  const obj = restOfExp(constants, part.substring(i), [], undefined, '(');\n  i += obj.length + 1;\n  const args: CodeString[] = [];\n  if (part.char(i - 1) === '(') {\n    const argsString = restOfExp(constants, part.substring(i), [], '(');\n    i += argsString.length + 1;\n    let found: CodeString;\n    let j = 0;\n    while ((found = restOfExp(constants, argsString.substring(j), [/^,/])).length) {\n      j += found.length + 1;\n      args.push(found.trim());\n    }\n  }\n  ctx.lispTree = lispify(\n    constants,\n    part.substring(i),\n    expectTypes.expEdge.next,\n    createLisp({\n      op: LispType.New,\n      a: lispify(constants, obj, expectTypes.initialize.next),\n      b: args.map((arg) => lispify(constants, arg, expectTypes.initialize.next)),\n    })\n  );\n});\n\nconst ofStart2 = lispify(\n  undefined as any,\n  new CodeString('let $$iterator = $$obj[Symbol.iterator]()'),\n  ['initialize']\n);\nconst ofStart3 = lispify(undefined as any, new CodeString('let $$next = $$iterator.next()'), [\n  'initialize',\n]);\nconst ofCondition = lispify(undefined as any, new CodeString('return !$$next.done'), [\n  'initialize',\n]);\nconst ofStep = lispify(undefined as any, new CodeString('$$next = $$iterator.next()'));\nconst inStart2 = lispify(undefined as any, new CodeString('let $$keys = Object.keys($$obj)'), [\n  'initialize',\n]);\nconst inStart3 = lispify(undefined as any, new CodeString('let $$keyIndex = 0'), ['initialize']);\nconst inStep = lispify(undefined as any, new CodeString('$$keyIndex++'));\nconst inCondition = lispify(undefined as any, new CodeString('return $$keyIndex < $$keys.length'), [\n  'initialize',\n]);\n\nfunction lispify(\n  constants: IConstants,\n  part: CodeString,\n  expected?: readonly string[],\n  lispTree?: Lisp,\n  topLevel = false\n): Lisp {\n  lispTree = lispTree || NullLisp;\n  expected = expected || expectTypes.initialize.next;\n  if (part === undefined) return lispTree;\n\n  part = part.trimStart();\n  const str = part.toString();\n  if (!part.length && !expected.includes('expEnd')) {\n    throw new SyntaxError('Unexpected end of expression');\n  }\n  if (!part.length) return lispTree;\n\n  const ctx = { lispTree: lispTree };\n\n  let res: any;\n  for (const expect of expected) {\n    if (expect === 'expEnd') {\n      continue;\n    }\n    for (const type in expectTypes[expect].types) {\n      if (type === 'expEnd') {\n        continue;\n      }\n      if ((res = expectTypes[expect].types[type].exec(str))) {\n        lastType = type;\n        lastLastLastLastPart = lastLastLastPart;\n        lastLastLastPart = lastLastPart;\n        lastLastPart = lastPart;\n        lastPart = part;\n        try {\n          lispTypes.get(type)?.(constants, type, part, res, expect, ctx);\n        } catch (e) {\n          if (topLevel && e instanceof SyntaxError) {\n            throw new ParseError(e.message, str);\n          }\n          throw e;\n        }\n        break;\n      }\n    }\n    if (res) break;\n  }\n\n  if (!res && part.length) {\n    if (topLevel) {\n      throw new ParseError(`Unexpected token after ${lastType}: ${part.char(0)}`, str);\n    }\n    throw new SyntaxError(`Unexpected token after ${lastType}: ${part.char(0)}`);\n  }\n  return ctx.lispTree;\n}\n\nconst startingExpectedWithoutSingle = startingExecpted.filter((r) => r !== 'expSingle');\n\nfunction lispifyExpr(constants: IConstants, str: CodeString, expected?: readonly string[]): Lisp {\n  if (!str.trimStart().length) return NullLisp;\n  const subExpressions: CodeString[] = [];\n  let sub: CodeString;\n  let pos = 0;\n  expected = expected || expectTypes.initialize.next;\n  if (expected.includes('expSingle')) {\n    if (testMultiple(str.toString(), Object.values(expectTypes.expSingle.types))) {\n      return lispify(constants, str, ['expSingle'], undefined, true);\n    }\n  }\n  if (expected === startingExecpted) expected = startingExpectedWithoutSingle;\n  while ((sub = restOfExp(constants, str.substring(pos), [/^,/])).length) {\n    subExpressions.push(sub.trimStart());\n    pos += sub.length + 1;\n  }\n  if (subExpressions.length === 1) {\n    return lispify(constants, str, expected, undefined, true);\n  }\n  if (expected.includes('initialize')) {\n    const defined = expectTypes.initialize.types.initialize.exec(subExpressions[0].toString());\n    if (defined) {\n      return createLisp<Block>({\n        op: LispType.Block,\n        a: subExpressions.map((str, i) =>\n          lispify(\n            constants,\n            i ? new CodeString(defined![1] + ' ' + str) : str,\n            ['initialize'],\n            undefined,\n            true\n          )\n        ),\n        b: LispType.None,\n      });\n    } else if (expectTypes.initialize.types.return.exec(subExpressions[0].toString())) {\n      return lispify(constants, str, expected, undefined, true);\n    }\n  }\n  const exprs = subExpressions.map((str) => lispify(constants, str, expected, undefined, true));\n  return createLisp<Expression>({ op: LispType.Expression, a: exprs, b: LispType.None });\n}\n\nexport function lispifyReturnExpr(constants: IConstants, str: CodeString) {\n  return createLisp<Return>({\n    op: LispType.Return,\n    a: LispType.None,\n    b: lispifyExpr(constants, str),\n  });\n}\n\nexport function lispifyBlock(str: CodeString, constants: IConstants, expression = false): Lisp[] {\n  str = insertSemicolons(constants, str);\n  if (!str.trim().length) return [];\n  const parts: CodeString[] = [];\n  let part: CodeString;\n  let pos = 0;\n  let start = 0;\n  let details: restDetails = {};\n  let skipped = false;\n  let isInserted = false;\n  while (\n    (part = restOfExp(\n      constants,\n      str.substring(pos),\n      [semiColon],\n      undefined,\n      undefined,\n      undefined,\n      details\n    )).length\n  ) {\n    isInserted = !!(str.char(pos + part.length) && str.char(pos + part.length) !== ';');\n    pos += part.length + (isInserted ? 0 : 1);\n    if (/^\\s*else(?![\\w$])/.test(str.substring(pos).toString())) {\n      skipped = true;\n    } else if (\n      details['words']?.includes('do') &&\n      /^\\s*while(?![\\w$])/.test(str.substring(pos).toString())\n    ) {\n      skipped = true;\n    } else {\n      skipped = false;\n      parts.push(str.substring(start, pos - (isInserted ? 0 : 1)));\n      start = pos;\n    }\n    details = {};\n    if (expression) break;\n  }\n  if (skipped) {\n    parts.push(str.substring(start, pos - (isInserted ? 0 : 1)));\n  }\n  return parts\n    .map((str) => str.trimStart())\n    .filter((str) => str.length)\n    .map((str) => {\n      return lispifyExpr(constants, str.trimStart(), startingExecpted);\n    });\n}\n\nexport function lispifyFunction(\n  str: CodeString,\n  constants: IConstants,\n  expression = false\n): Lisp[] {\n  if (!str.trim().length) return [];\n  const tree = lispifyBlock(str, constants, expression);\n  hoist(tree);\n  return tree;\n}\n\nfunction hoist(item: LispItem, res: Lisp[] = []): boolean {\n  if (isLisp(item)) {\n    if (!isLisp<LispFamily>(item)) return false;\n    const [op, a, b] = item;\n    if (\n      op === LispType.Try ||\n      op === LispType.If ||\n      op === LispType.Loop ||\n      op === LispType.Switch\n    ) {\n      hoist(a, res);\n      hoist(b, res);\n    } else if (op === LispType.Var) {\n      res.push(createLisp({ op: LispType.Var, a: a, b: LispType.None }));\n    } else if (op === LispType.Function && a[1]) {\n      res.push(item);\n      return true;\n    }\n  } else if (Array.isArray(item)) {\n    const rep: LispItemSingle[] = [];\n    for (const it of item) {\n      if (!hoist(it, res)) {\n        rep.push(it);\n      }\n    }\n    if (rep.length !== item.length) {\n      item.length = 0;\n      item.push(...res, ...rep);\n    }\n  }\n  return false;\n}\n\nconst closingsNoInsertion = /^(\\})\\s*(catch|finally|else|while|instanceof)(?![\\w$])/;\n//  \\w|)|] \\n \\w = 2                                  // \\} \\w|\\{ = 5\nconst colonsRegex = /^((([\\w$\\])\"'`]|\\+\\+|--)\\s*\\r?\\n\\s*([\\w$+\\-!~]))|(\\}\\s*[\\w$!~+\\-{(\"'`]))/;\n\n// if () \\w \\n; \\w              == \\w \\n \\w    | last === if             a\n// if () { }; \\w                == \\} ^else    | last === if             b\n// if () \\w \\n; else \\n \\w \\n;  == \\w \\n \\w    | last === else           a\n// if () {} else {}; \\w         == \\} \\w       | last === else           b\n// while () \\n \\w \\n; \\w        == \\w \\n \\w    | last === while          a\n// while () { }; \\w             == \\} \\w       | last === while          b\n// do \\w \\n; while (); \\w       == \\w \\n while | last === do             a\n// do { } while (); \\w          == \\) \\w       | last === while          c\n// try {} catch () {}; \\w       == \\} \\w       | last === catch|finally  b\n// \\w \\n; \\w                    == \\w \\n \\w    | last === none           a\n// cb() \\n \\w                   == \\) \\n \\w    | last === none           a\n// obj[a] \\n \\w                 == \\] \\n \\w    | last === none           a\n// {} {}                        == \\} \\{       | last === none           b\n\nexport function insertSemicolons(constants: IConstants, str: CodeString): CodeString {\n  let rest = str;\n  let sub = emptyString;\n  let details: restDetails = {};\n  const inserted = insertedSemicolons.get(str.ref) || new Array(str.ref.str.length);\n  while (\n    (sub = restOfExp(constants, rest, [], undefined, undefined, [colonsRegex], details)).length\n  ) {\n    let valid = false;\n    let part = sub;\n    let edge = sub.length;\n    if (details.regRes) {\n      valid = true;\n      const [, , a, , , b] = details.regRes;\n      edge = details.regRes[3] === '++' || details.regRes[3] === '--' ? sub.length + 1 : sub.length;\n      part = rest.substring(0, edge);\n      if (b) {\n        const res = closingsNoInsertion.exec(rest.substring(sub.length - 1).toString());\n        if (res) {\n          if (res[2] === 'while') {\n            valid = details.lastWord !== 'do';\n          } else {\n            valid = false;\n          }\n        } else if (\n          details.lastWord === 'function' &&\n          details.regRes[5][0] === '}' &&\n          details.regRes[5].slice(-1) === '('\n        ) {\n          valid = false;\n        }\n      } else if (a) {\n        if (\n          details.lastWord === 'if' ||\n          details.lastWord === 'while' ||\n          details.lastWord === 'for' ||\n          details.lastWord === 'else'\n        ) {\n          valid = false;\n        }\n      }\n    }\n    if (valid) {\n      inserted[part.end] = true;\n    }\n    rest = rest.substring(edge);\n    details = {};\n  }\n  insertedSemicolons.set(str.ref, inserted);\n  return str;\n}\n\nexport function checkRegex(str: string): IRegEx | null {\n  let i = 1;\n  let escape = false;\n  let done = false;\n  let cancel = false;\n  while (i < str.length && !done && !cancel) {\n    done = str[i] === '/' && !escape;\n    escape = str[i] === '\\\\' && !escape;\n    cancel = str[i] === '\\n';\n    i++;\n  }\n  const after = str.substring(i);\n  cancel = cancel || !done || /^\\s*\\d/.test(after);\n  if (cancel) return null;\n  const flags = /^[a-z]*/.exec(after);\n  if (/^\\s+[\\w$]/.test(str.substring(i + flags![0].length))) {\n    return null;\n  }\n  return {\n    regex: str.substring(1, i - 1),\n    flags: (flags && flags[0]) || '',\n    length: i + ((flags && flags[0].length) || 0),\n  };\n}\n\nconst notDivide = /(typeof|delete|instanceof|return|in|of|throw|new|void|do|if)$/;\nconst possibleDivide = /^([\\w$\\])]|\\+\\+|--)[\\s/]/;\nexport function extractConstants(\n  constants: IConstants,\n  str: string,\n  currentEnclosure = ''\n): { str: string; length: number } {\n  let quote;\n  let extract: (string | number)[] = [];\n  let escape = false;\n  let regexFound: IRegEx | null;\n  let comment = '';\n  let commentStart = -1;\n  let currJs: string[] = [];\n  let char = '';\n  const strRes: (string | number)[] = [];\n  const enclosures: string[] = [];\n  let isPossibleDivide: RegExpExecArray | null = null;\n  let i = 0;\n  for (i = 0; i < str.length; i++) {\n    char = str[i];\n    if (comment) {\n      if (char === comment) {\n        if (comment === '*' && str[i + 1] === '/') {\n          comment = '';\n          i++;\n        } else if (comment === '\\n') {\n          comment = '';\n        }\n      }\n    } else {\n      if (escape) {\n        escape = false;\n        extract.push(char);\n        continue;\n      }\n\n      if (quote) {\n        if (quote === '`' && char === '$' && str[i + 1] === '{') {\n          const skip = extractConstants(constants, str.substring(i + 2), '{');\n          currJs.push(skip.str);\n          extract.push('${', currJs.length - 1, `}`);\n          i += skip.length + 2;\n        } else if (quote === char) {\n          if (quote === '`') {\n            const li = createLisp<Literal>({\n              op: LispType.Literal,\n              a: unraw(extract.join('')),\n              b: [],\n            });\n            li.tempJsStrings = currJs;\n            constants.literals.push(li);\n            strRes.push(`\\``, constants.literals.length - 1, `\\``);\n          } else {\n            constants.strings.push(unraw(extract.join('')));\n            strRes.push(`\"`, constants.strings.length - 1, `\"`);\n          }\n          quote = null;\n          extract = [];\n        } else {\n          extract.push(char);\n        }\n      } else {\n        if (char === \"'\" || char === '\"' || char === '`') {\n          currJs = [];\n          quote = char;\n        } else if (closings[currentEnclosure] === char && !enclosures.length) {\n          return { str: strRes.join(''), length: i };\n        } else if (closings[char]) {\n          enclosures.push(char);\n          strRes.push(char);\n        } else if (closings[enclosures[enclosures.length - 1]] === char) {\n          enclosures.pop();\n          strRes.push(char);\n        } else if (char === '/' && (str[i + 1] === '*' || str[i + 1] === '/')) {\n          comment = str[i + 1] === '*' ? '*' : '\\n';\n          commentStart = i;\n        } else if (\n          char === '/' &&\n          !isPossibleDivide &&\n          (regexFound = checkRegex(str.substring(i)))\n        ) {\n          constants.regexes.push(regexFound);\n          strRes.push(`/`, constants.regexes.length - 1, `/r`);\n          i += regexFound.length - 1;\n        } else {\n          strRes.push(char);\n        }\n\n        if (!isPossibleDivide || !space.test(char)) {\n          if ((isPossibleDivide = possibleDivide.exec(str.substring(i)))) {\n            if (notDivide.test(str.substring(0, i + isPossibleDivide[1].length))) {\n              isPossibleDivide = null;\n            }\n          }\n        }\n      }\n      escape = !!(quote && char === '\\\\');\n    }\n  }\n\n  if (comment) {\n    if (comment === '*') {\n      throw new SyntaxError(`Unclosed comment '/*': ${str.substring(commentStart)}`);\n    }\n  }\n  return { str: strRes.join(''), length: i };\n}\n\nexport default function parse(code: string, eager = false, expression = false): IExecutionTree {\n  if (typeof code !== 'string') throw new ParseError(`Cannot parse ${code}`, code);\n  let str = ' ' + code;\n  const constants: IConstants = { strings: [], literals: [], regexes: [], eager };\n  str = extractConstants(constants, str).str;\n\n  for (const l of constants.literals) {\n    l[2] = l.tempJsStrings!.map((js: string) => lispifyExpr(constants, new CodeString(js)));\n    delete l.tempJsStrings;\n  }\n  return { tree: lispifyFunction(new CodeString(str), constants, expression), constants };\n}\n","import { createFunction, currentTicks } from './executor.js';\nimport parse, { lispifyFunction } from './parser.js';\nimport { IExecContext, Ticks } from './utils.js';\n\nexport interface IEvalContext {\n  sandboxFunction: typeof sandboxFunction;\n  sandboxedEval: typeof sandboxedEval;\n  sandboxedSetTimeout: typeof sandboxedSetTimeout;\n  sandboxedSetInterval: typeof sandboxedSetInterval;\n  lispifyFunction: typeof lispifyFunction;\n}\nexport type SandboxFunction = (code: string, ...args: string[]) => () => unknown;\nexport type SandboxEval = (code: string) => unknown;\nexport type SandboxSetTimeout = (\n  handler: TimerHandler,\n  timeout?: number,\n  ...args: unknown[]\n) => any;\nexport type SandboxSetInterval = (\n  handler: TimerHandler,\n  timeout?: number,\n  ...args: unknown[]\n) => any;\n\nexport function createEvalContext(): IEvalContext {\n  return {\n    sandboxFunction,\n    sandboxedEval,\n    sandboxedSetTimeout,\n    sandboxedSetInterval,\n    lispifyFunction,\n  };\n}\n\nexport function sandboxFunction(context: IExecContext, ticks?: Ticks): SandboxFunction {\n  return SandboxFunction;\n  function SandboxFunction(...params: string[]) {\n    const code = params.pop() || '';\n    const parsed = parse(code);\n    return createFunction(\n      params,\n      parsed.tree,\n      ticks || currentTicks.current,\n      {\n        ...context,\n        constants: parsed.constants,\n        tree: parsed.tree,\n      },\n      undefined,\n      'anonymous'\n    );\n  }\n}\n\nexport function sandboxedEval(func: SandboxFunction): SandboxEval {\n  return sandboxEval;\n  function sandboxEval(code: string) {\n    return func(code)();\n  }\n}\n\nexport function sandboxedSetTimeout(func: SandboxFunction): SandboxSetTimeout {\n  return function sandboxSetTimeout(handler, ...args) {\n    if (typeof handler !== 'string') return setTimeout(handler, ...args);\n    return setTimeout(func(handler), ...args);\n  };\n}\n\nexport function sandboxedSetInterval(func: SandboxFunction): SandboxSetInterval {\n  return function sandboxSetInterval(handler, ...args) {\n    if (typeof handler !== 'string') return setInterval(handler, ...args);\n    return setInterval(func(handler), ...args);\n  };\n}\n","import { IEvalContext } from './eval.js';\nimport { Change, ExecReturn, executeTree, executeTreeAsync } from './executor.js';\nimport {\n  createContext,\n  IContext,\n  IExecContext,\n  IGlobals,\n  IOptionParams,\n  IOptions,\n  IScope,\n  replacementCallback,\n  SandboxGlobal,\n  SubscriptionSubject,\n} from './utils.js';\n\nfunction subscribeSet(\n  obj: unknown,\n  name: string,\n  callback: (modification: Change) => void,\n  context: {\n    setSubscriptions: WeakMap<\n      SubscriptionSubject,\n      Map<string, Set<(modification: Change) => void>>\n    >;\n    changeSubscriptions: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>;\n  }\n): { unsubscribe: () => void } {\n  if (!(obj instanceof Object))\n    throw new Error(\n      'Invalid subscription object, got ' + (typeof obj === 'object' ? 'null' : typeof obj)\n    );\n  const names =\n    context.setSubscriptions.get(obj) || new Map<string, Set<(modification: Change) => void>>();\n  context.setSubscriptions.set(obj, names);\n  const callbacks = names.get(name) || new Set();\n  names.set(name, callbacks);\n  callbacks.add(callback);\n  let changeCbs: Set<(modification: Change) => void>;\n  const val = (obj as any)[name] as unknown;\n  if (val instanceof Object) {\n    changeCbs = context.changeSubscriptions.get(val) || new Set();\n    changeCbs.add(callback);\n    context.changeSubscriptions.set(val, changeCbs);\n  }\n  return {\n    unsubscribe: () => {\n      callbacks.delete(callback);\n      changeCbs?.delete(callback);\n    },\n  };\n}\n\nexport default class SandboxExec {\n  context: IContext;\n  setSubscriptions: WeakMap<SubscriptionSubject, Map<string, Set<(modification: Change) => void>>> =\n    new WeakMap();\n  changeSubscriptions: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>> =\n    new WeakMap();\n  sandboxFunctions: WeakMap<(...args: any[]) => any, IExecContext> = new WeakMap();\n  constructor(options?: IOptionParams, public evalContext?: IEvalContext) {\n    const opt: IOptions = Object.assign(\n      {\n        audit: false,\n        forbidFunctionCalls: false,\n        forbidFunctionCreation: false,\n        globals: SandboxExec.SAFE_GLOBALS,\n        prototypeWhitelist: SandboxExec.SAFE_PROTOTYPES,\n        prototypeReplacements: new Map<new () => any, replacementCallback>(),\n      },\n      options || {}\n    );\n    this.context = createContext(this, opt);\n  }\n\n  static get SAFE_GLOBALS(): IGlobals {\n    return {\n      Function,\n      console: {\n        debug: console.debug,\n        error: console.error,\n        info: console.info,\n        log: console.log,\n        table: console.table,\n        warn: console.warn,\n      },\n      isFinite,\n      isNaN,\n      parseFloat,\n      parseInt,\n      decodeURI,\n      decodeURIComponent,\n      encodeURI,\n      encodeURIComponent,\n      escape,\n      unescape,\n      Boolean,\n      Number,\n      BigInt,\n      String,\n      Object,\n      Array,\n      Symbol,\n      Error,\n      EvalError,\n      RangeError,\n      ReferenceError,\n      SyntaxError,\n      TypeError,\n      URIError,\n      Int8Array,\n      Uint8Array,\n      Uint8ClampedArray,\n      Int16Array,\n      Uint16Array,\n      Int32Array,\n      Uint32Array,\n      Float32Array,\n      Float64Array,\n      Map,\n      Set,\n      WeakMap,\n      WeakSet,\n      Promise,\n      Intl,\n      JSON,\n      Math,\n      Date,\n      RegExp,\n    };\n  }\n\n  static get SAFE_PROTOTYPES(): Map<any, Set<string>> {\n    const protos = [\n      SandboxGlobal,\n      Function,\n      Boolean,\n      Number,\n      BigInt,\n      String,\n      Date,\n      Error,\n      Array,\n      Int8Array,\n      Uint8Array,\n      Uint8ClampedArray,\n      Int16Array,\n      Uint16Array,\n      Int32Array,\n      Uint32Array,\n      Float32Array,\n      Float64Array,\n      Map,\n      Set,\n      WeakMap,\n      WeakSet,\n      Promise,\n      Symbol,\n      Date,\n      RegExp,\n    ];\n    const map = new Map<any, Set<string>>();\n    protos.forEach((proto) => {\n      map.set(proto, new Set());\n    });\n    map.set(\n      Object,\n      new Set([\n        'entries',\n        'fromEntries',\n        'getOwnPropertyNames',\n        'is',\n        'keys',\n        'hasOwnProperty',\n        'isPrototypeOf',\n        'propertyIsEnumerable',\n        'toLocaleString',\n        'toString',\n        'valueOf',\n        'values',\n      ])\n    );\n    return map;\n  }\n\n  subscribeGet(\n    callback: (obj: SubscriptionSubject, name: string) => void,\n    context: IExecContext\n  ): { unsubscribe: () => void } {\n    context.getSubscriptions.add(callback);\n    return { unsubscribe: () => context.getSubscriptions.delete(callback) };\n  }\n\n  subscribeSet(\n    obj: object,\n    name: string,\n    callback: (modification: Change) => void,\n    context: SandboxExec | IExecContext\n  ): { unsubscribe: () => void } {\n    return subscribeSet(obj, name, callback, context);\n  }\n\n  subscribeSetGlobal(\n    obj: SubscriptionSubject,\n    name: string,\n    callback: (modification: Change) => void\n  ): { unsubscribe: () => void } {\n    return subscribeSet(obj, name, callback, this);\n  }\n\n  getContext(fn: (...args: any[]) => any) {\n    return this.sandboxFunctions.get(fn);\n  }\n\n  executeTree<T>(context: IExecContext, scopes: IScope[] = []): ExecReturn<T> {\n    return executeTree(\n      {\n        ticks: BigInt(0),\n      },\n      context,\n      context.tree,\n      scopes\n    );\n  }\n\n  executeTreeAsync<T>(context: IExecContext, scopes: IScope[] = []): Promise<ExecReturn<T>> {\n    return executeTreeAsync(\n      {\n        ticks: BigInt(0),\n      },\n      context,\n      context.tree,\n      scopes\n    );\n  }\n}\n","import { createExecContext, IExecContext, IOptionParams, IScope } from './utils.js';\nimport { createEvalContext } from './eval.js';\nimport { ExecReturn } from './executor.js';\nimport parse from './parser.js';\nimport SandboxExec from './SandboxExec.js';\n\nexport default class Sandbox extends SandboxExec {\n  constructor(options?: IOptionParams) {\n    super(options, createEvalContext());\n  }\n\n  static audit<T>(code: string, scopes: IScope[] = []): ExecReturn<T> {\n    const globals: Record<string, unknown> = {};\n    for (const i of Object.getOwnPropertyNames(globalThis) as [keyof typeof globalThis]) {\n      globals[i] = globalThis[i];\n    }\n    const sandbox = new SandboxExec({\n      globals,\n      audit: true,\n    });\n    return sandbox.executeTree(\n      createExecContext(sandbox, parse(code, true), createEvalContext()),\n      scopes\n    );\n  }\n\n  static parse(code: string) {\n    return parse(code);\n  }\n\n  compile<T>(\n    code: string,\n    optimize = false\n  ): (...scopes: IScope[]) => { context: IExecContext; run: () => T } {\n    const parsed = parse(code, optimize);\n    const exec = (...scopes: IScope[]) => {\n      const context = createExecContext(this, parsed, this.evalContext);\n      return { context, run: () => this.executeTree<T>(context, [...scopes]).result };\n    };\n    return exec;\n  }\n\n  compileAsync<T>(\n    code: string,\n    optimize = false\n  ): (...scopes: IScope[]) => { context: IExecContext; run: () => Promise<T> } {\n    const parsed = parse(code, optimize);\n    const exec = (...scopes: IScope[]) => {\n      const context = createExecContext(this, parsed, this.evalContext);\n      return {\n        context,\n        run: () => this.executeTreeAsync<T>(context, [...scopes]).then((ret) => ret.result),\n      };\n    };\n    return exec;\n  }\n\n  compileExpression<T>(\n    code: string,\n    optimize = false\n  ): (...scopes: IScope[]) => { context: IExecContext; run: () => T } {\n    const parsed = parse(code, optimize, true);\n    const exec = (...scopes: IScope[]) => {\n      const context = createExecContext(this, parsed, this.evalContext);\n      return { context, run: () => this.executeTree<T>(context, [...scopes]).result };\n    };\n    return exec;\n  }\n\n  compileExpressionAsync<T>(\n    code: string,\n    optimize = false\n  ): (...scopes: IScope[]) => { context: IExecContext; run: () => Promise<T> } {\n    const parsed = parse(code, optimize, true);\n    const exec = (...scopes: IScope[]) => {\n      const context = createExecContext(this, parsed, this.evalContext);\n      return {\n        context,\n        run: () => this.executeTreeAsync<T>(context, [...scopes]).then((ret) => ret.result),\n      };\n    };\n    return exec;\n  }\n}\n"],"names":["SandboxGlobal","globals","globalThis","i","this","ExecContext","constructor","ctx","constants","tree","getSubscriptions","setSubscriptions","changeSubscriptions","setSubscriptionsGlobal","changeSubscriptionsGlobal","evals","registerSandboxFunction","allowJit","evalContext","createContext","sandbox","options","sandboxGlobal","context","globalsWhitelist","Set","Object","values","prototypeWhitelist","Map","map","a","prototype","globalScope","Scope","set","getPrototypeOf","Symbol","iterator","createExecContext","executionTree","execContext","WeakMap","fn","sandboxFunctions","func","sandboxFunction","Function","eval","sandboxedEval","setTimeout","sandboxedSetTimeout","setInterval","sandboxedSetInterval","CodeString","str","ref","start","end","length","substring","undefined","code","len","char","toString","trimStart","found","exec","slice","trim","valueOf","keysOnly","obj","ret","assign","key","reservedWords","parent","vars","functionThis","const","let","var","isFuncScope","allVars","get","functionScope","Prop","has","SyntaxError","hasOwnProperty","val","prop","ReferenceError","isConst","TypeError","isGlobal","SandboxError","declare","type","value","LocalScope","Error","isLisp","item","Array","isArray","isVariable","forEach","cb","ExecReturn","auditReport","result","returned","breakLoop","continueLoop","optional","generateArgs","argNames","args","arg","startsWith","sandboxedFunctions","WeakSet","createFunction","parsed","ticks","scope","name","forbidFunctionCreation","executeTree","add","createFunctionAsync","Promise","async","executeTreeAsync","assignCheck","op","arrayChange","push","pop","shift","unshift","splice","reverse","sort","copyWithin","KeyVal","SpreadObject","SpreadArray","If","t","f","literalRegex","ops","addOps","valueOrProp","execMany","done","inLoopOrSwitch","execSync","_execManySync","_execManyAsync","catch","res","syncDone","d","e","ad","asyncDone","execAsync","isInstant","instant","p","callback","resolve","reject","err","r","doneOriginal","_execNoneRecurse","bobj","b","audit","globalsAccess","rep","Number","String","Boolean","isFunction","prototypeAccess","prot","includes","whitelist","replace","prototypeReplacements","size","constuctor","g","forbidFunctionCalls","vals","flat","JSON","stringify","cache","recurse","x","y","keys","change","changed","added","removed","startIndex","deleteCount","Math","min","endIndex","NaN","Infinity","BigInt","strings","parseInt","reg","regexes","RegExp","regex","flags","literals","js","resnums","processed","reses","num","match","$$","$","lispifyFunction","isAsync","checkFirst","startInternal","getIterator","startStep","step","condition","beforeStep","loop","loopScope","internalVars","$$obj","interalScope","innerLoopVars","toTest","isTrue","caseItem","exception","catchBody","finallyBody","executeTreeWithDone","unexecTypes","currentTicks","current","executionQuota","onExecutionQuotaReached","scopes","s","_executeWithDoneSync","_executeWithDoneAsync","parseHexToInt","hex","validateAndParseHex","errorName","enforcedLength","parsedHex","isNaN","parseHexadecimalCode","parsedCode","fromCharCode","parseUnicodeCode","surrogateCode","parsedSurrogateCode","isCurlyBraced","text","charAt","parseUnicodeCodePointCode","codePoint","fromCodePoint","RangeError","singleCharacterEscapes","parseSingleCharacterCode","escapeMatch","unraw","raw","_","backslash","unicodeWithSurrogate","surrogate","unicode","octal","singleCharacter","createLisp","NullLisp","lispTypes","ParseError","message","super","lastType","inlineIfElse","elseIf","ifElse","space","expectTypes","splitter","types","opHigh","comparitor","boolOp","bitwise","next","inlineIf","assignment","assignModify","incrementerBefore","expEdge","call","incrementerAfter","modifier","not","inverse","negative","positive","typeof","delete","dot","arrayProp","createObject","createArray","number","string","literal","boolean","null","und","arrowFunctionSingle","arrowFunction","inlineFunction","group","void","await","new","initialize","return","throw","spreadObject","spreadArray","expEnd","expFunction","function","expSingle","for","do","while","loopAction","if","try","block","switch","closings","testMultiple","tests","emptyString","okFirstChars","aNumber","wordReg","semiColon","insertedSemicolons","quoteCache","restOfExp","part","quote","firstOpening","closingsTests","details","words","isStart","hasSemiTest","filter","insertedSemis","escape","lastChar","isOneLiner","lastInertedSemi","skip","regRes","foundWord","foundNumber","sub","lastAnyWord","lastWord","test","oneliner","startingExecpted","setLispType","closingsCreate","typesCreate","expect","extract","l","funcFound","lispifyExpr","lispify","lisptype","lispTree","modifierTypes","incrementTypes","adderTypes","instanceof","in","opTypes","extractIfElse","foundTrue","elseReg","count","foundElse","first","all","max","true","false","quoteCount","ie","startTrue","trueBlock","elseBlock","lispifyBlock","indexOf","caseFound","statement","insertSemicolons","caseTest","cases","defaultFound","cond","bracketFound","exprs","notEmpty","index","matches","lt","isArrow","isReturn","argPos","split","ended","eager","iteratorRegex","body","lispifyReturnExpr","extract2","k","ofStart2","ofStart3","ofCondition","ofStep","inStart2","inStart3","inStep","inCondition","isBlock","catchReg","catchRes","offset","argsString","j","expected","topLevel","startingExpectedWithoutSingle","subExpressions","pos","defined","expression","parts","skipped","isInserted","hoist","it","closingsNoInsertion","colonsRegex","rest","inserted","valid","edge","checkRegex","cancel","after","notDivide","possibleDivide","extractConstants","currentEnclosure","regexFound","comment","commentStart","currJs","strRes","enclosures","isPossibleDivide","li","join","tempJsStrings","parse","createEvalContext","SandboxFunction","params","handler","subscribeSet","names","callbacks","changeCbs","unsubscribe","SandboxExec","opt","SAFE_GLOBALS","SAFE_PROTOTYPES","console","debug","error","info","log","table","warn","isFinite","parseFloat","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","unescape","EvalError","URIError","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","Intl","Date","protos","proto","subscribeGet","subscribeSetGlobal","getContext","Sandbox","static","getOwnPropertyNames","compile","optimize","run","compileAsync","then","compileExpression","compileExpressionAsync"],"mappings":"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"}