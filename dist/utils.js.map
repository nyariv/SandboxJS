{"version":3,"file":"utils.js","sources":["../src/utils.ts"],"sourcesContent":["import { IEvalContext } from './eval';\nimport { Change, Unknown } from './executor';\nimport { IConstants, IExecutionTree, Lisp, LispItem } from './parser';\nimport SandboxExec from './SandboxExec';\n\nexport type replacementCallback = (obj: any, isStaticAccess: boolean) => any;\n\nexport interface IOptionParams {\n  audit?: boolean;\n  forbidFunctionCalls?: boolean;\n  forbidFunctionCreation?: boolean;\n  prototypeReplacements?: Map<new () => any, replacementCallback>;\n  prototypeWhitelist?: Map<any, Set<string>>;\n  globals: IGlobals;\n  executionQuota?: bigint;\n  onExecutionQuotaReached?: (\n    ticks: Ticks,\n    scope: Scope,\n    context: IExecutionTree,\n    tree: LispItem\n  ) => boolean | void;\n}\n\nexport interface IOptions {\n  audit: boolean;\n  forbidFunctionCalls: boolean;\n  forbidFunctionCreation: boolean;\n  prototypeReplacements: Map<new () => any, replacementCallback>;\n  prototypeWhitelist: Map<any, Set<string>>;\n  globals: IGlobals;\n  executionQuota?: bigint;\n  onExecutionQuotaReached?: (\n    ticks: Ticks,\n    scope: Scope,\n    context: IExecutionTree,\n    tree: LispItem\n  ) => boolean | void;\n}\n\nexport interface IContext {\n  sandbox: SandboxExec;\n  globalScope: Scope;\n  sandboxGlobal: ISandboxGlobal;\n  globalsWhitelist: Set<any>;\n  prototypeWhitelist: Map<any, Set<string>>;\n  options: IOptions;\n  auditReport?: IAuditReport;\n}\n\nexport interface IAuditReport {\n  globalsAccess: Set<unknown>;\n  prototypeAccess: { [name: string]: Set<string> };\n}\n\nexport interface Ticks {\n  ticks: bigint;\n}\n\nexport type SubscriptionSubject = object;\n\nexport interface IExecContext extends IExecutionTree {\n  ctx: IContext;\n  getSubscriptions: Set<(obj: SubscriptionSubject, name: string) => void>;\n  setSubscriptions: WeakMap<SubscriptionSubject, Map<string, Set<(modification: Change) => void>>>;\n  changeSubscriptions: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>;\n  setSubscriptionsGlobal: WeakMap<\n    SubscriptionSubject,\n    Map<string, Set<(modification: Change) => void>>\n  >;\n  changeSubscriptionsGlobal: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>;\n  registerSandboxFunction: (fn: (...args: any[]) => any) => void;\n  evals: Map<any, any>;\n  allowJit: boolean;\n  evalContext?: IEvalContext;\n}\n\nexport interface ISandboxGlobal {\n  [key: string]: unknown;\n}\ninterface SandboxGlobalConstructor {\n  new (globals: IGlobals): ISandboxGlobal;\n}\n\nexport const SandboxGlobal = function SandboxGlobal(this: ISandboxGlobal, globals: IGlobals) {\n  if (globals === (globalThis as any)) return globalThis;\n  for (const i in globals) {\n    this[i] = globals[i];\n  }\n} as any as SandboxGlobalConstructor;\n\nexport type IGlobals = ISandboxGlobal;\n\nexport class ExecContext implements IExecContext {\n  constructor(\n    public ctx: IContext,\n    public constants: IConstants,\n    public tree: Lisp[],\n    public getSubscriptions: Set<(obj: SubscriptionSubject, name: string) => void>,\n    public setSubscriptions: WeakMap<\n      SubscriptionSubject,\n      Map<string, Set<(modification: Change) => void>>\n    >,\n    public changeSubscriptions: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>,\n    public setSubscriptionsGlobal: WeakMap<\n      SubscriptionSubject,\n      Map<string, Set<(modification: Change) => void>>\n    >,\n    public changeSubscriptionsGlobal: WeakMap<\n      SubscriptionSubject,\n      Set<(modification: Change) => void>\n    >,\n    public evals: Map<any, any>,\n    public registerSandboxFunction: (fn: (...args: any[]) => any) => void,\n    public allowJit: boolean,\n    public evalContext?: IEvalContext\n  ) {}\n}\n\nexport function createContext(sandbox: SandboxExec, options: IOptions): IContext {\n  const sandboxGlobal = new SandboxGlobal(options.globals);\n  const context = {\n    sandbox: sandbox,\n    globalsWhitelist: new Set(Object.values(options.globals)),\n    prototypeWhitelist: new Map([...options.prototypeWhitelist].map((a) => [a[0].prototype, a[1]])),\n    options,\n    globalScope: new Scope(null, options.globals, sandboxGlobal),\n    sandboxGlobal,\n  };\n  context.prototypeWhitelist.set(Object.getPrototypeOf([][Symbol.iterator]()) as Object, new Set());\n  return context;\n}\n\nexport function createExecContext(\n  sandbox: {\n    setSubscriptions: WeakMap<\n      SubscriptionSubject,\n      Map<string, Set<(modification: Change) => void>>\n    >;\n    changeSubscriptions: WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>;\n    sandboxFunctions: WeakMap<(...args: any[]) => any, IExecContext>;\n    context: IContext;\n  },\n  executionTree: IExecutionTree,\n  evalContext?: IEvalContext\n): IExecContext {\n  const evals = new Map();\n  const execContext: IExecContext = new ExecContext(\n    sandbox.context,\n    executionTree.constants,\n    executionTree.tree,\n    new Set<(obj: SubscriptionSubject, name: string) => void>(),\n    new WeakMap<SubscriptionSubject, Map<string, Set<(modification: Change) => void>>>(),\n    new WeakMap<SubscriptionSubject, Set<(modification: Change) => void>>(),\n    sandbox.setSubscriptions,\n    sandbox.changeSubscriptions,\n    evals,\n    (fn) => sandbox.sandboxFunctions.set(fn, execContext),\n    !!evalContext,\n    evalContext\n  );\n  if (evalContext) {\n    const func = evalContext.sandboxFunction(execContext);\n    evals.set(Function, func);\n    evals.set(eval, evalContext.sandboxedEval(func));\n    evals.set(setTimeout, evalContext.sandboxedSetTimeout(func));\n    evals.set(setInterval, evalContext.sandboxedSetInterval(func));\n  }\n  return execContext;\n}\n\nexport class CodeString {\n  start: number;\n  end: number;\n  ref: { str: string };\n  constructor(str: string | CodeString) {\n    this.ref = { str: '' };\n    if (str instanceof CodeString) {\n      this.ref = str.ref;\n      this.start = str.start;\n      this.end = str.end;\n    } else {\n      this.ref.str = str;\n      this.start = 0;\n      this.end = str.length;\n    }\n  }\n\n  substring(start: number, end?: number): CodeString {\n    if (!this.length) return this;\n    start = this.start + start;\n    if (start < 0) {\n      start = 0;\n    }\n    if (start > this.end) {\n      start = this.end;\n    }\n    end = end === undefined ? this.end : this.start + end;\n    if (end < 0) {\n      end = 0;\n    }\n    if (end > this.end) {\n      end = this.end;\n    }\n    const code = new CodeString(this);\n    code.start = start;\n    code.end = end;\n    return code;\n  }\n\n  get length() {\n    const len = this.end - this.start;\n    return len < 0 ? 0 : len;\n  }\n\n  char(i: number) {\n    if (this.start === this.end) return undefined;\n    return this.ref.str[this.start + i];\n  }\n\n  toString() {\n    return this.ref.str.substring(this.start, this.end);\n  }\n\n  trimStart() {\n    const found = /^\\s+/.exec(this.toString());\n    const code = new CodeString(this);\n    if (found) {\n      code.start += found[0].length;\n    }\n    return code;\n  }\n\n  slice(start: number, end?: number) {\n    if (start < 0) {\n      start = this.end - this.start + start;\n    }\n    if (start < 0) {\n      start = 0;\n    }\n    if (end === undefined) {\n      end = this.end - this.start;\n    }\n\n    if (end < 0) {\n      end = this.end - this.start + end;\n    }\n    if (end < 0) {\n      end = 0;\n    }\n    return this.substring(start, end);\n  }\n\n  trim() {\n    const code = this.trimStart();\n    const found = /\\s+$/.exec(code.toString());\n    if (found) {\n      code.end -= found[0].length;\n    }\n    return code;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n}\n\nfunction keysOnly(obj: unknown): Record<string, true> {\n  const ret: Record<string, true> = Object.assign({}, obj);\n  for (const key in ret) {\n    ret[key] = true;\n  }\n  return ret;\n}\n\nconst reservedWords = new Set([\n  'instanceof',\n  'typeof',\n  'return',\n  'throw',\n  'try',\n  'catch',\n  'if',\n  'finally',\n  'else',\n  'in',\n  'of',\n  'var',\n  'let',\n  'const',\n  'for',\n  'delete',\n  'false',\n  'true',\n  'while',\n  'do',\n  'break',\n  'continue',\n  'new',\n  'function',\n  'async',\n  'await',\n  'switch',\n  'case',\n]);\n\nexport const enum VarType {\n  let = 'let',\n  const = 'const',\n  var = 'var',\n}\n\nexport class Scope {\n  parent: Scope | null;\n  const: { [key: string]: true } = {};\n  let: { [key: string]: true } = {};\n  var: { [key: string]: true } = {};\n  globals: { [key: string]: true };\n  allVars: { [key: string]: unknown } & Object;\n  functionThis?: Unknown;\n  constructor(parent: Scope | null, vars = {}, functionThis?: Unknown) {\n    const isFuncScope = functionThis !== undefined || parent === null;\n    this.parent = parent;\n    this.allVars = vars;\n    this.let = isFuncScope ? this.let : keysOnly(vars);\n    this.var = isFuncScope ? keysOnly(vars) : this.var;\n    this.globals = parent === null ? keysOnly(vars) : {};\n    this.functionThis = functionThis;\n  }\n\n  get(key: string, functionScope = false): Prop {\n    const functionThis = this.functionThis;\n    if (key === 'this' && functionThis !== undefined) {\n      return new Prop({ this: functionThis }, key, true, false, true);\n    }\n    if (reservedWords.has(key)) throw new SyntaxError(\"Unexepected token '\" + key + \"'\");\n    if (this.parent === null || !functionScope || functionThis !== undefined) {\n      if (this.globals.hasOwnProperty(key)) {\n        return new Prop(functionThis, key, false, true, true);\n      }\n      if (key in this.allVars && (!(key in {}) || this.allVars.hasOwnProperty(key))) {\n        return new Prop(\n          this.allVars,\n          key,\n          this.const.hasOwnProperty(key),\n          this.globals.hasOwnProperty(key),\n          true\n        );\n      }\n      if (this.parent === null) {\n        return new Prop(undefined, key);\n      }\n    }\n    return this.parent.get(key, functionScope);\n  }\n\n  set(key: string, val: unknown) {\n    if (key === 'this') throw new SyntaxError('\"this\" cannot be assigned');\n    if (reservedWords.has(key)) throw new SyntaxError(\"Unexepected token '\" + key + \"'\");\n    const prop = this.get(key);\n    if (prop.context === undefined) {\n      throw new ReferenceError(`Variable '${key}' was not declared.`);\n    }\n    if (prop.isConst) {\n      throw new TypeError(`Cannot assign to const variable '${key}'`);\n    }\n    if (prop.isGlobal) {\n      throw new SandboxError(`Cannot override global variable '${key}'`);\n    }\n    if (!(prop.context instanceof Object)) throw new SandboxError('Scope is not an object');\n    prop.context[prop.prop] = val;\n    return prop;\n  }\n\n  declare(key: string, type: VarType, value: unknown = undefined, isGlobal = false): Prop {\n    if (key === 'this') throw new SyntaxError('\"this\" cannot be declared');\n    if (reservedWords.has(key)) throw new SyntaxError(\"Unexepected token '\" + key + \"'\");\n    if (type === 'var' && this.functionThis === undefined && this.parent !== null) {\n      return this.parent.declare(key, type, value, isGlobal);\n    } else if (\n      (this[type].hasOwnProperty(key) && type !== 'const' && !this.globals.hasOwnProperty(key)) ||\n      !(key in this.allVars)\n    ) {\n      if (isGlobal) {\n        this.globals[key] = true;\n      }\n      this[type][key] = true;\n      this.allVars[key] = value;\n    } else {\n      throw new SandboxError(`Identifier '${key}' has already been declared`);\n    }\n    return new Prop(this.allVars, key, this.const.hasOwnProperty(key), isGlobal);\n  }\n}\n\nexport interface IScope {\n  [key: string]: any;\n}\n\nexport class FunctionScope implements IScope {}\n\nexport class LocalScope implements IScope {}\n\nexport class SandboxError extends Error {}\n\nexport function isLisp<Type extends Lisp = Lisp>(item: LispItem | LispItem): item is Type {\n  return (\n    Array.isArray(item) &&\n    typeof item[0] === 'number' &&\n    item[0] !== LispType.None &&\n    item[0] !== LispType.True\n  );\n}\n\nexport const enum LispType {\n  None,\n  Prop,\n  StringIndex,\n  Let,\n  Const,\n  Call,\n  KeyVal,\n  Number,\n  Return,\n  Assign,\n  InlineFunction,\n  ArrowFunction,\n  CreateArray,\n  If,\n  IfCase,\n  InlineIf,\n  InlineIfCase,\n  SpreadObject,\n  SpreadArray,\n  ArrayProp,\n  PropOptional,\n  CallOptional,\n  CreateObject,\n  Group,\n  Not,\n  IncrementBefore,\n  IncrementAfter,\n  DecrementBefore,\n  DecrementAfter,\n  And,\n  Or,\n  StrictNotEqual,\n  StrictEqual,\n  Plus,\n  Var,\n  GlobalSymbol,\n  Literal,\n  Function,\n  Loop,\n  Try,\n  Switch,\n  SwitchCase,\n  Block,\n  Expression,\n  Await,\n  New,\n  Throw,\n  Minus,\n  Divide,\n  Power,\n  Multiply,\n  Modulus,\n  Equal,\n  NotEqual,\n  SmallerEqualThan,\n  LargerEqualThan,\n  SmallerThan,\n  LargerThan,\n  Negative,\n  Positive,\n  Typeof,\n  Delete,\n  Instanceof,\n  In,\n  Inverse,\n  SubractEquals,\n  AddEquals,\n  DivideEquals,\n  PowerEquals,\n  MultiplyEquals,\n  ModulusEquals,\n  BitNegateEquals,\n  BitAndEquals,\n  BitOrEquals,\n  UnsignedShiftRightEquals,\n  ShiftRightEquals,\n  ShiftLeftEquals,\n  BitAnd,\n  BitOr,\n  BitNegate,\n  BitShiftLeft,\n  BitShiftRight,\n  BitUnsignedShiftRight,\n  BigInt,\n  LiteralIndex,\n  RegexIndex,\n  LoopAction,\n  Void,\n  True,\n\n  LispEnumSize,\n}\n\nexport class Prop {\n  constructor(\n    public context: Unknown,\n    public prop: string,\n    public isConst = false,\n    public isGlobal = false,\n    public isVariable = false\n  ) {}\n\n  get<T = unknown>(context: IExecContext): T {\n    const ctx = this.context;\n    if (ctx === undefined) throw new ReferenceError(`${this.prop} is not defined`);\n    if (ctx === null)\n      throw new TypeError(`Cannot read properties of null, (reading '${this.prop}')`);\n    context.getSubscriptions.forEach((cb) => cb(ctx, this.prop));\n    return (ctx as any)[this.prop] as T;\n  }\n}\n"],"names":[],"mappings":"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"}